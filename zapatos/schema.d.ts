/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.1.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  type JSONSelectableFromSelectable<T> = { [K in keyof T]:
    Date extends T[K] ? Exclude<T[K], Date> | db.DateString :
    Date[] extends T[K] ? Exclude<T[K], Date[]> | db.DateString[] :
    T[K]
  };

  /* === schema: extra === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace tableInOtherSchema {
    export type Table = 'tableInOtherSchema';
    export interface Selectable {
      id: number;
      details: string | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      details?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      details?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      details?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'tableInOtherSchema_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }


  /* === schema: public === */

  /* --- enums --- */

  export type appleEnvironment = 'PROD' | 'Sandbox';
  export namespace every {
    export type appleEnvironment = ['PROD', 'Sandbox'];
  }

  /* --- tables --- */

  export namespace appleTransactions {
    export type Table = 'appleTransactions';
    export interface Selectable {
      environment: appleEnvironment;
      originalTransactionId: string;
      accountId: number;
      latestReceiptData: string | null;
    }
    export interface Whereable {
      environment?: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.ParentColumn>;
      originalTransactionId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      accountId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      latestReceiptData?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      environment: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment;
      originalTransactionId: string | db.Parameter<string> | db.SQLFragment;
      accountId: number | db.Parameter<number> | db.SQLFragment;
      latestReceiptData?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      environment?: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.SQLFragment<any, appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment>;
      originalTransactionId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      accountId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      latestReceiptData?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'appleTransPKey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace authors {
    export type Table = 'authors';
    export interface Selectable {
      id: number;
      name: string;
      isLiving: boolean | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      isLiving?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      name: string | db.Parameter<string> | db.SQLFragment;
      isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'authors_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace bankAccounts {
    export type Table = 'bankAccounts';
    export interface Selectable {
      id: number;
      balance: number;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'bankAccounts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace books {
    export type Table = 'books';
    export interface Selectable {
      id: number;
      authorId: number;
      title: string | null;
      createdAt: Date;
      updatedAt: Date;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      authorId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      createdAt?: Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn>;
      updatedAt?: Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      authorId: number | db.Parameter<number> | db.SQLFragment;
      title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      createdAt?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment;
      updatedAt?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      authorId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      createdAt?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment>;
      updatedAt?: Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'books_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace customTypes {
    export type Table = 'customTypes';
    export interface Selectable {
      id: number;
      structuredDocument: c.PgMySpecialJsonb | null;
      location: c.PgGeometry | null;
      otherLocation: c.PgMySpecialGeometry | null;
      furtherLocations: c.Pg_mySpecialGeometry | null;
      name: c.PgIllegal_characters_text | null;
      blah: c.PgContinue | null;
      bar: c.PgSQL | null;
      numbers: number[] | null;
      alsoName: c.PgSnake_cased_typename | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      structuredDocument?: c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | db.SQLFragment | db.ParentColumn>;
      location?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
      otherLocation?: c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | db.SQLFragment | db.ParentColumn>;
      furtherLocations?: c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | db.SQLFragment | db.ParentColumn>;
      name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | db.SQLFragment | db.ParentColumn>;
      blah?: c.PgContinue | db.Parameter<c.PgContinue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgContinue | db.Parameter<c.PgContinue> | db.SQLFragment | db.ParentColumn>;
      bar?: c.PgSQL | db.Parameter<c.PgSQL> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgSQL | db.Parameter<c.PgSQL> | db.SQLFragment | db.ParentColumn>;
      numbers?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      structuredDocument?: c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | null | db.DefaultType | db.SQLFragment;
      location?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment;
      otherLocation?: c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | null | db.DefaultType | db.SQLFragment;
      furtherLocations?: c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | null | db.DefaultType | db.SQLFragment;
      name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | null | db.DefaultType | db.SQLFragment;
      blah?: c.PgContinue | db.Parameter<c.PgContinue> | null | db.DefaultType | db.SQLFragment;
      bar?: c.PgSQL | db.Parameter<c.PgSQL> | null | db.DefaultType | db.SQLFragment;
      numbers?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment;
      alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      structuredDocument?: c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | null | db.DefaultType | db.SQLFragment>;
      location?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment>;
      otherLocation?: c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | null | db.DefaultType | db.SQLFragment>;
      furtherLocations?: c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | null | db.DefaultType | db.SQLFragment>;
      name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | null | db.DefaultType | db.SQLFragment>;
      blah?: c.PgContinue | db.Parameter<c.PgContinue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgContinue | db.Parameter<c.PgContinue> | null | db.DefaultType | db.SQLFragment>;
      bar?: c.PgSQL | db.Parameter<c.PgSQL> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgSQL | db.Parameter<c.PgSQL> | null | db.DefaultType | db.SQLFragment>;
      numbers?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment>;
      alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'customTypes_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace dimensions {
    export type Table = 'dimensions';
    export interface Selectable {
      default_id: number;
      always_id: number;
      millimetres: number;
      inches: number;
      metres: number;
    }
    export interface Whereable {
      default_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      always_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      millimetres?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      inches?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      metres?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      default_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      millimetres: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      default_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      millimetres?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'dimensions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace emailAuthentication {
    export type Table = 'emailAuthentication';
    export interface Selectable {
      email: string;
      consecutiveFailedLogins: number;
      lastFailedLogin: Date | null;
    }
    export interface Whereable {
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      consecutiveFailedLogins?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      lastFailedLogin?: Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      email: string | db.Parameter<string> | db.SQLFragment;
      consecutiveFailedLogins?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      lastFailedLogin?: Date | db.Parameter<Date> | db.DateString | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      consecutiveFailedLogins?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      lastFailedLogin?: Date | db.Parameter<Date> | db.DateString | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, Date | db.Parameter<Date> | db.DateString | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'emailAuthentication_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace employees {
    export type Table = 'employees';
    export interface Selectable {
      id: number;
      name: string;
      managerId: number | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      managerId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      name: string | db.Parameter<string> | db.SQLFragment;
      managerId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      managerId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'employees_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace identityTest {
    export type Table = 'identityTest';
    export interface Selectable {
      id: number;
      data: string | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      data?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'identityTest_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace orderProducts {
    export type Table = 'orderProducts';
    export interface Selectable {
      orderId: number;
      productId: number;
    }
    export interface Whereable {
      orderId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      productId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      orderId: number | db.Parameter<number> | db.SQLFragment;
      productId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      orderId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      productId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace orders {
    export type Table = 'orders';
    export interface Selectable {
      id: number;
      userEmail: string | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      userEmail?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      userEmail?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      userEmail?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'orders_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace photos {
    export type Table = 'photos';
    export interface Selectable {
      photoId: number;
      url: string;
    }
    export interface Whereable {
      photoId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      photoId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      url: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      photoId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'photos_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace products {
    export type Table = 'products';
    export interface Selectable {
      id: number;
      productName: string | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      productName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      productName?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      productName?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'products_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace stores {
    export type Table = 'stores';
    export interface Selectable {
      id: number;
      name: string;
      geom: c.PgGeometry;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      geom?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      name: string | db.Parameter<string> | db.SQLFragment;
      geom: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      geom?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'stores_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace subjectPhotos {
    export type Table = 'subjectPhotos';
    export interface Selectable {
      subjectId: number;
      photoId: number;
    }
    export interface Whereable {
      subjectId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      photoId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      subjectId: number | db.Parameter<number> | db.SQLFragment;
      photoId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      subjectId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      photoId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'userphotosunique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace subjects {
    export type Table = 'subjects';
    export interface Selectable {
      subjectId: number;
      name: string;
    }
    export interface Whereable {
      subjectId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      subjectId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      subjectId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'subjects_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tags {
    export type Table = 'tags';
    export interface Selectable {
      tag: string;
      bookId: number;
    }
    export interface Whereable {
      tag?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      bookId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      tag: string | db.Parameter<string> | db.SQLFragment;
      bookId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      tag?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      bookId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
    export type UniqueIndex = 'tagsUniqueIdx';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = appleTransactions.Table | authors.Table | bankAccounts.Table | books.Table | customTypes.Table | dimensions.Table | emailAuthentication.Table | employees.Table | identityTest.Table | orderProducts.Table | orders.Table | photos.Table | products.Table | stores.Table | subjectPhotos.Table | subjects.Table | tableInOtherSchema.Table | tags.Table;
  export type Selectable = appleTransactions.Selectable | authors.Selectable | bankAccounts.Selectable | books.Selectable | customTypes.Selectable | dimensions.Selectable | emailAuthentication.Selectable | employees.Selectable | identityTest.Selectable | orderProducts.Selectable | orders.Selectable | photos.Selectable | products.Selectable | stores.Selectable | subjectPhotos.Selectable | subjects.Selectable | tableInOtherSchema.Selectable | tags.Selectable;
  export type Whereable = appleTransactions.Whereable | authors.Whereable | bankAccounts.Whereable | books.Whereable | customTypes.Whereable | dimensions.Whereable | emailAuthentication.Whereable | employees.Whereable | identityTest.Whereable | orderProducts.Whereable | orders.Whereable | photos.Whereable | products.Whereable | stores.Whereable | subjectPhotos.Whereable | subjects.Whereable | tableInOtherSchema.Whereable | tags.Whereable;
  export type Insertable = appleTransactions.Insertable | authors.Insertable | bankAccounts.Insertable | books.Insertable | customTypes.Insertable | dimensions.Insertable | emailAuthentication.Insertable | employees.Insertable | identityTest.Insertable | orderProducts.Insertable | orders.Insertable | photos.Insertable | products.Insertable | stores.Insertable | subjectPhotos.Insertable | subjects.Insertable | tableInOtherSchema.Insertable | tags.Insertable;
  export type Updatable = appleTransactions.Updatable | authors.Updatable | bankAccounts.Updatable | books.Updatable | customTypes.Updatable | dimensions.Updatable | emailAuthentication.Updatable | employees.Updatable | identityTest.Updatable | orderProducts.Updatable | orders.Updatable | photos.Updatable | products.Updatable | stores.Updatable | subjectPhotos.Updatable | subjects.Updatable | tableInOtherSchema.Updatable | tags.Updatable;
  export type UniqueIndex = appleTransactions.UniqueIndex | authors.UniqueIndex | bankAccounts.UniqueIndex | books.UniqueIndex | customTypes.UniqueIndex | dimensions.UniqueIndex | emailAuthentication.UniqueIndex | employees.UniqueIndex | identityTest.UniqueIndex | orderProducts.UniqueIndex | orders.UniqueIndex | photos.UniqueIndex | products.UniqueIndex | stores.UniqueIndex | subjectPhotos.UniqueIndex | subjects.UniqueIndex | tableInOtherSchema.UniqueIndex | tags.UniqueIndex;
  export type Column = appleTransactions.Column | authors.Column | bankAccounts.Column | books.Column | customTypes.Column | dimensions.Column | emailAuthentication.Column | employees.Column | identityTest.Column | orderProducts.Column | orders.Column | photos.Column | products.Column | stores.Column | subjectPhotos.Column | subjects.Column | tableInOtherSchema.Column | tags.Column;
  export type AllTables = [appleTransactions.Table, authors.Table, bankAccounts.Table, books.Table, customTypes.Table, dimensions.Table, emailAuthentication.Table, employees.Table, identityTest.Table, orderProducts.Table, orders.Table, photos.Table, products.Table, stores.Table, subjectPhotos.Table, subjects.Table, tableInOtherSchema.Table, tags.Table];


  export type SelectableForTable<T extends Table> = {
    appleTransactions: appleTransactions.Selectable;
    authors: authors.Selectable;
    bankAccounts: bankAccounts.Selectable;
    books: books.Selectable;
    customTypes: customTypes.Selectable;
    dimensions: dimensions.Selectable;
    emailAuthentication: emailAuthentication.Selectable;
    employees: employees.Selectable;
    identityTest: identityTest.Selectable;
    orderProducts: orderProducts.Selectable;
    orders: orders.Selectable;
    photos: photos.Selectable;
    products: products.Selectable;
    stores: stores.Selectable;
    subjectPhotos: subjectPhotos.Selectable;
    subjects: subjects.Selectable;
    tableInOtherSchema: tableInOtherSchema.Selectable;
    tags: tags.Selectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    appleTransactions: appleTransactions.Whereable;
    authors: authors.Whereable;
    bankAccounts: bankAccounts.Whereable;
    books: books.Whereable;
    customTypes: customTypes.Whereable;
    dimensions: dimensions.Whereable;
    emailAuthentication: emailAuthentication.Whereable;
    employees: employees.Whereable;
    identityTest: identityTest.Whereable;
    orderProducts: orderProducts.Whereable;
    orders: orders.Whereable;
    photos: photos.Whereable;
    products: products.Whereable;
    stores: stores.Whereable;
    subjectPhotos: subjectPhotos.Whereable;
    subjects: subjects.Whereable;
    tableInOtherSchema: tableInOtherSchema.Whereable;
    tags: tags.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    appleTransactions: appleTransactions.Insertable;
    authors: authors.Insertable;
    bankAccounts: bankAccounts.Insertable;
    books: books.Insertable;
    customTypes: customTypes.Insertable;
    dimensions: dimensions.Insertable;
    emailAuthentication: emailAuthentication.Insertable;
    employees: employees.Insertable;
    identityTest: identityTest.Insertable;
    orderProducts: orderProducts.Insertable;
    orders: orders.Insertable;
    photos: photos.Insertable;
    products: products.Insertable;
    stores: stores.Insertable;
    subjectPhotos: subjectPhotos.Insertable;
    subjects: subjects.Insertable;
    tableInOtherSchema: tableInOtherSchema.Insertable;
    tags: tags.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    appleTransactions: appleTransactions.Updatable;
    authors: authors.Updatable;
    bankAccounts: bankAccounts.Updatable;
    books: books.Updatable;
    customTypes: customTypes.Updatable;
    dimensions: dimensions.Updatable;
    emailAuthentication: emailAuthentication.Updatable;
    employees: employees.Updatable;
    identityTest: identityTest.Updatable;
    orderProducts: orderProducts.Updatable;
    orders: orders.Updatable;
    photos: photos.Updatable;
    products: products.Updatable;
    stores: stores.Updatable;
    subjectPhotos: subjectPhotos.Updatable;
    subjects: subjects.Updatable;
    tableInOtherSchema: tableInOtherSchema.Updatable;
    tags: tags.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    appleTransactions: appleTransactions.UniqueIndex;
    authors: authors.UniqueIndex;
    bankAccounts: bankAccounts.UniqueIndex;
    books: books.UniqueIndex;
    customTypes: customTypes.UniqueIndex;
    dimensions: dimensions.UniqueIndex;
    emailAuthentication: emailAuthentication.UniqueIndex;
    employees: employees.UniqueIndex;
    identityTest: identityTest.UniqueIndex;
    orderProducts: orderProducts.UniqueIndex;
    orders: orders.UniqueIndex;
    photos: photos.UniqueIndex;
    products: products.UniqueIndex;
    stores: stores.UniqueIndex;
    subjectPhotos: subjectPhotos.UniqueIndex;
    subjects: subjects.UniqueIndex;
    tableInOtherSchema: tableInOtherSchema.UniqueIndex;
    tags: tags.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    appleTransactions: appleTransactions.Column;
    authors: authors.Column;
    bankAccounts: bankAccounts.Column;
    books: books.Column;
    customTypes: customTypes.Column;
    dimensions: dimensions.Column;
    emailAuthentication: emailAuthentication.Column;
    employees: employees.Column;
    identityTest: identityTest.Column;
    orderProducts: orderProducts.Column;
    orders: orders.Column;
    photos: photos.Column;
    products: products.Column;
    stores: stores.Column;
    subjectPhotos: subjectPhotos.Column;
    subjects: subjects.Column;
    tableInOtherSchema: tableInOtherSchema.Column;
    tags: tags.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    appleTransactions: appleTransactions.SQL;
    authors: authors.SQL;
    bankAccounts: bankAccounts.SQL;
    books: books.SQL;
    customTypes: customTypes.SQL;
    dimensions: dimensions.SQL;
    emailAuthentication: emailAuthentication.SQL;
    employees: employees.SQL;
    identityTest: identityTest.SQL;
    orderProducts: orderProducts.SQL;
    orders: orders.SQL;
    photos: photos.SQL;
    products: products.SQL;
    stores: stores.SQL;
    subjectPhotos: subjectPhotos.SQL;
    subjects: subjects.SQL;
    tableInOtherSchema: tableInOtherSchema.SQL;
    tags: tags.SQL;
  }[T];

}
