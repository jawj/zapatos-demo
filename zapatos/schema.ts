/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type appleEnvironment = 'PROD' | 'Sandbox';
  export namespace every {
    export type appleEnvironment = ['PROD', 'Sandbox'];
  }

  /* --- tables --- */

  export namespace appleTransactions {
    export type Table = 'appleTransactions';
    export interface Selectable {
      environment: appleEnvironment;
      originalTransactionId: string;
      accountId: number;
      latestReceiptData: string | null;
    }
    export interface JSONSelectable {
      environment: appleEnvironment;
      originalTransactionId: string;
      accountId: number;
      latestReceiptData: string | null;
    }
    export interface Whereable {
      environment?: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.ParentColumn>;
      originalTransactionId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      accountId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      latestReceiptData?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      environment: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment;
      originalTransactionId: string | db.Parameter<string> | db.SQLFragment;
      accountId: number | db.Parameter<number> | db.SQLFragment;
      latestReceiptData?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      environment?: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.SQLFragment<any, appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment>;
      originalTransactionId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      accountId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      latestReceiptData?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'appleTransPKey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace authors {
    export type Table = 'authors';
    export interface Selectable {
      id: number;
      name: string;
      isLiving: boolean | null;
    }
    export interface JSONSelectable {
      id: number;
      name: string;
      isLiving: boolean | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      isLiving?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      name: string | db.Parameter<string> | db.SQLFragment;
      isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'authorsPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace bankAccounts {
    export type Table = 'bankAccounts';
    export interface Selectable {
      id: number;
      balance: number;
    }
    export interface JSONSelectable {
      id: number;
      balance: number;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'bankAccountsPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace books {
    export type Table = 'books';
    export interface Selectable {
      id: number;
      authorId: number;
      title: string | null;
      createdAt: Date;
      updatedAt: Date;
    }
    export interface JSONSelectable {
      id: number;
      authorId: number;
      title: string | null;
      createdAt: db.TimestampTzString;
      updatedAt: db.TimestampTzString;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      authorId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      authorId: number | db.Parameter<number> | db.SQLFragment;
      title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      authorId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'booksPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace bools {
    export type Table = 'bools';
    export interface Selectable {
      value: boolean;
    }
    export interface JSONSelectable {
      value: boolean;
    }
    export interface Whereable {
      value?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      value?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      value?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace chapters {
    export type Table = 'chapters';
    export interface Selectable {
      id: number;
      bookId: number;
    }
    export interface JSONSelectable {
      id: number;
      bookId: number;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      bookId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      bookId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      bookId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'chaptersPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace chat {
    export type Table = 'chat';
    export interface Selectable {
      telegramChatId: string;
      created: Date;
      updated: Date;
    }
    export interface JSONSelectable {
      telegramChatId: string;
      created: db.TimestampTzString;
      updated: db.TimestampTzString;
    }
    export interface Whereable {
      telegramChatId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      updated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      telegramChatId: string | db.Parameter<string> | db.SQLFragment;
      created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      updated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      telegramChatId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      updated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'chatPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace customTypes {
    export type Table = 'customTypes';
    export interface Selectable {
      id: number;
      structuredDocument: c.PgMy_special_jsonb | null;
      location: c.PgGeometry | null;
      otherLocation: c.PgMy_special_geometry | null;
      furtherLocations: c.Pg_my_special_geometry | null;
      name: c.PgIllegal_characters_text | null;
      alsoName: c.PgSnake_cased_typename | null;
      blah: c.PgContinue | null;
      bar: c.Pg_s_q_l | null;
      numbers: number[] | null;
    }
    export interface JSONSelectable {
      id: number;
      structuredDocument: c.PgMy_special_jsonb | null;
      location: c.PgGeometry | null;
      otherLocation: c.PgMy_special_geometry | null;
      furtherLocations: c.Pg_my_special_geometry | null;
      name: c.PgIllegal_characters_text | null;
      alsoName: c.PgSnake_cased_typename | null;
      blah: c.PgContinue | null;
      bar: c.Pg_s_q_l | null;
      numbers: number[] | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      structuredDocument?: c.PgMy_special_jsonb | db.Parameter<c.PgMy_special_jsonb> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMy_special_jsonb | db.Parameter<c.PgMy_special_jsonb> | db.SQLFragment | db.ParentColumn>;
      location?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
      otherLocation?: c.PgMy_special_geometry | db.Parameter<c.PgMy_special_geometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMy_special_geometry | db.Parameter<c.PgMy_special_geometry> | db.SQLFragment | db.ParentColumn>;
      furtherLocations?: c.Pg_my_special_geometry | db.Parameter<c.Pg_my_special_geometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.Pg_my_special_geometry | db.Parameter<c.Pg_my_special_geometry> | db.SQLFragment | db.ParentColumn>;
      name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | db.SQLFragment | db.ParentColumn>;
      alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | db.SQLFragment | db.ParentColumn>;
      blah?: c.PgContinue | db.Parameter<c.PgContinue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgContinue | db.Parameter<c.PgContinue> | db.SQLFragment | db.ParentColumn>;
      bar?: c.Pg_s_q_l | db.Parameter<c.Pg_s_q_l> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.Pg_s_q_l | db.Parameter<c.Pg_s_q_l> | db.SQLFragment | db.ParentColumn>;
      numbers?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      structuredDocument?: c.PgMy_special_jsonb | db.Parameter<c.PgMy_special_jsonb> | null | db.DefaultType | db.SQLFragment;
      location?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment;
      otherLocation?: c.PgMy_special_geometry | db.Parameter<c.PgMy_special_geometry> | null | db.DefaultType | db.SQLFragment;
      furtherLocations?: c.Pg_my_special_geometry | db.Parameter<c.Pg_my_special_geometry> | null | db.DefaultType | db.SQLFragment;
      name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | null | db.DefaultType | db.SQLFragment;
      alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | null | db.DefaultType | db.SQLFragment;
      blah?: c.PgContinue | db.Parameter<c.PgContinue> | null | db.DefaultType | db.SQLFragment;
      bar?: c.Pg_s_q_l | db.Parameter<c.Pg_s_q_l> | null | db.DefaultType | db.SQLFragment;
      numbers?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      structuredDocument?: c.PgMy_special_jsonb | db.Parameter<c.PgMy_special_jsonb> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgMy_special_jsonb | db.Parameter<c.PgMy_special_jsonb> | null | db.DefaultType | db.SQLFragment>;
      location?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment>;
      otherLocation?: c.PgMy_special_geometry | db.Parameter<c.PgMy_special_geometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgMy_special_geometry | db.Parameter<c.PgMy_special_geometry> | null | db.DefaultType | db.SQLFragment>;
      furtherLocations?: c.Pg_my_special_geometry | db.Parameter<c.Pg_my_special_geometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.Pg_my_special_geometry | db.Parameter<c.Pg_my_special_geometry> | null | db.DefaultType | db.SQLFragment>;
      name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | null | db.DefaultType | db.SQLFragment>;
      alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | null | db.DefaultType | db.SQLFragment>;
      blah?: c.PgContinue | db.Parameter<c.PgContinue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgContinue | db.Parameter<c.PgContinue> | null | db.DefaultType | db.SQLFragment>;
      bar?: c.Pg_s_q_l | db.Parameter<c.Pg_s_q_l> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.Pg_s_q_l | db.Parameter<c.Pg_s_q_l> | null | db.DefaultType | db.SQLFragment>;
      numbers?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'customTypesPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace dimensions {
    export type Table = 'dimensions';
    export interface Selectable {
      defaultId: number;
      alwaysId: number;
      millimetres: number;
      inches: number;
      metres: number;
    }
    export interface JSONSelectable {
      defaultId: number;
      alwaysId: number;
      millimetres: number;
      inches: number;
      metres: number;
    }
    export interface Whereable {
      defaultId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      alwaysId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      millimetres?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      inches?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      metres?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      defaultId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      millimetres: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      defaultId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      millimetres?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'dimensionsPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace emailAuthentication {
    export type Table = 'emailAuthentication';
    export interface Selectable {
      email: string;
      consecutiveFailedLogins: number;
      lastFailedLogin: Date | null;
    }
    export interface JSONSelectable {
      email: string;
      consecutiveFailedLogins: number;
      lastFailedLogin: db.TimestampTzString | null;
    }
    export interface Whereable {
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      consecutiveFailedLogins?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      lastFailedLogin?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      email: string | db.Parameter<string> | db.SQLFragment;
      consecutiveFailedLogins?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      lastFailedLogin?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      consecutiveFailedLogins?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      lastFailedLogin?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'emailAuthenticationPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace employees {
    export type Table = 'employees';
    export interface Selectable {
      id: number;
      name: string;
      managerId: number | null;
    }
    export interface JSONSelectable {
      id: number;
      name: string;
      managerId: number | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      managerId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      name: string | db.Parameter<string> | db.SQLFragment;
      managerId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      managerId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'employeesPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace files {
    export type Table = 'files';
    export interface Selectable {
      id: number;
      createdAt: Date;
      updatedAt: Date;
      path: string;
    }
    export interface JSONSelectable {
      id: number;
      createdAt: db.TimestampTzString;
      updatedAt: db.TimestampTzString;
      path: string;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      path?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      createdAt: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      updatedAt: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      path: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      path?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'filesPathKey' | 'filesPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace identityTest {
    export type Table = 'identityTest';
    export interface Selectable {
      id: number;
      data: string | null;
    }
    export interface JSONSelectable {
      id: number;
      data: string | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      data?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'identityTestPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace images {
    export type Table = 'images';
    export interface Selectable {
      fileId: number | null;
      width: number;
      height: number;
    }
    export interface JSONSelectable {
      fileId: number | null;
      width: number;
      height: number;
    }
    export interface Whereable {
      fileId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      width?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      height?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      fileId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      width: number | db.Parameter<number> | db.SQLFragment;
      height: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      fileId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      width?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      height?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'imagesFileIdKey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace int8test {
    export type Table = 'int8test';
    export interface Selectable {
      num: db.Int8String | null;
    }
    export interface JSONSelectable {
      num: number | null;
    }
    export interface Whereable {
      num?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      num?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      num?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace matBooks {
    export type Table = 'matBooks';
    export interface Selectable {
      name: string | null;
      title: string | null;
    }
    export interface JSONSelectable {
      name: string | null;
      title: string | null;
    }
    export interface Whereable {
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace matCustom {
    export type Table = 'matCustom';
    export interface Selectable {
      id: number | null;
      structuredDocument: c.PgMy_special_jsonb | null;
      location: c.PgGeometry | null;
      otherLocation: c.PgMy_special_geometry | null;
      furtherLocations: c.Pg_my_special_geometry | null;
      name: c.PgIllegal_characters_text | null;
      alsoName: c.PgSnake_cased_typename | null;
      blah: c.PgContinue | null;
      bar: c.Pg_s_q_l | null;
      numbers: number[] | null;
    }
    export interface JSONSelectable {
      id: number | null;
      structuredDocument: c.PgMy_special_jsonb | null;
      location: c.PgGeometry | null;
      otherLocation: c.PgMy_special_geometry | null;
      furtherLocations: c.Pg_my_special_geometry | null;
      name: c.PgIllegal_characters_text | null;
      alsoName: c.PgSnake_cased_typename | null;
      blah: c.PgContinue | null;
      bar: c.Pg_s_q_l | null;
      numbers: number[] | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      structuredDocument?: c.PgMy_special_jsonb | db.Parameter<c.PgMy_special_jsonb> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMy_special_jsonb | db.Parameter<c.PgMy_special_jsonb> | db.SQLFragment | db.ParentColumn>;
      location?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
      otherLocation?: c.PgMy_special_geometry | db.Parameter<c.PgMy_special_geometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMy_special_geometry | db.Parameter<c.PgMy_special_geometry> | db.SQLFragment | db.ParentColumn>;
      furtherLocations?: c.Pg_my_special_geometry | db.Parameter<c.Pg_my_special_geometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.Pg_my_special_geometry | db.Parameter<c.Pg_my_special_geometry> | db.SQLFragment | db.ParentColumn>;
      name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | db.SQLFragment | db.ParentColumn>;
      alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | db.SQLFragment | db.ParentColumn>;
      blah?: c.PgContinue | db.Parameter<c.PgContinue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgContinue | db.Parameter<c.PgContinue> | db.SQLFragment | db.ParentColumn>;
      bar?: c.Pg_s_q_l | db.Parameter<c.Pg_s_q_l> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.Pg_s_q_l | db.Parameter<c.Pg_s_q_l> | db.SQLFragment | db.ParentColumn>;
      numbers?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace nameCounts {
    export type Table = 'nameCounts';
    export interface Selectable {
      name: string;
      count: number | null;
    }
    export interface JSONSelectable {
      name: string;
      count: number | null;
    }
    export interface Whereable {
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      name: string | db.Parameter<string> | db.SQLFragment;
      count?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      count?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'nameCountsPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace numericTest {
    export type Table = 'numericTest';
    export interface Selectable {
      col: number | null;
    }
    export interface JSONSelectable {
      col: number | null;
    }
    export interface Whereable {
      col?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      col?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      col?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace orderProducts {
    export type Table = 'orderProducts';
    export interface Selectable {
      orderId: number;
      productId: number;
    }
    export interface JSONSelectable {
      orderId: number;
      productId: number;
    }
    export interface Whereable {
      orderId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      productId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      orderId: number | db.Parameter<number> | db.SQLFragment;
      productId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      orderId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      productId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace orders {
    export type Table = 'orders';
    export interface Selectable {
      id: number;
      userEmail: string;
    }
    export interface JSONSelectable {
      id: number;
      userEmail: string;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      userEmail?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      userEmail: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      userEmail?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'ordersPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace paragraphs {
    export type Table = 'paragraphs';
    export interface Selectable {
      id: number;
      chapterId: number;
    }
    export interface JSONSelectable {
      id: number;
      chapterId: number;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      chapterId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      chapterId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      chapterId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'paragraphsPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace photos {
    export type Table = 'photos';
    export interface Selectable {
      photoId: number;
      url: string;
    }
    export interface JSONSelectable {
      photoId: number;
      url: string;
    }
    export interface Whereable {
      photoId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      photoId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      url: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      photoId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'photosPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace products {
    export type Table = 'products';
    export interface Selectable {
      id: number;
      productName: string;
    }
    export interface JSONSelectable {
      id: number;
      productName: string;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      productName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      productName: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      productName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'productsPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace stores {
    export type Table = 'stores';
    export interface Selectable {
      id: number;
      name: string;
      geom: c.PgGeometry;
    }
    export interface JSONSelectable {
      id: number;
      name: string;
      geom: c.PgGeometry;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      geom?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      name: string | db.Parameter<string> | db.SQLFragment;
      geom: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      geom?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment>;
    }
    export type UniqueIndex = 'storesPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace stringreturning {
    export type Table = 'stringreturning';
    export interface Selectable {
      date: Date | null;
      arrdate: Date[] | null;
      time: db.TimeString | null;
      arrtime: db.TimeString[] | null;
      timetz: db.TimeTzString | null;
      arrtimetz: db.TimeTzString[] | null;
      timestamp: Date | null;
      arrtimestamp: Date[] | null;
      timestamptz: Date | null;
      arrtimestamptz: Date[] | null;
      interval: string | null;
      int4range: db.NumberRangeString | null;
      int8range: db.NumberRangeString | null;
      numrange: db.NumberRangeString | null;
      tsrange: db.DateRangeString | null;
      tstzrange: db.DateRangeString | null;
      daterange: db.DateRangeString | null;
      bytea: Buffer | null;
      int8: db.Int8String | null;
      money: string | null;
      numeric: number | null;
    }
    export interface JSONSelectable {
      date: db.DateString | null;
      arrdate: db.DateString[] | null;
      time: db.TimeString | null;
      arrtime: db.TimeString[] | null;
      timetz: db.TimeTzString | null;
      arrtimetz: db.TimeTzString[] | null;
      timestamp: db.TimestampString | null;
      arrtimestamp: db.TimestampString[] | null;
      timestamptz: db.TimestampTzString | null;
      arrtimestamptz: db.TimestampTzString[] | null;
      interval: string | null;
      int4range: db.NumberRangeString | null;
      int8range: db.NumberRangeString | null;
      numrange: db.NumberRangeString | null;
      tsrange: db.DateRangeString | null;
      tstzrange: db.DateRangeString | null;
      daterange: db.DateRangeString | null;
      bytea: db.ByteArrayString | null;
      int8: number | null;
      money: string | null;
      numeric: number | null;
    }
    export interface Whereable {
      date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      arrdate?: (db.DateString | Date)[] | db.Parameter<(db.DateString | Date)[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date)[] | db.Parameter<(db.DateString | Date)[]> | db.SQLFragment | db.ParentColumn>;
      time?: db.TimeString | db.Parameter<db.TimeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeString | db.Parameter<db.TimeString> | db.SQLFragment | db.ParentColumn>;
      arrtime?: db.TimeString[] | db.Parameter<db.TimeString[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeString[] | db.Parameter<db.TimeString[]> | db.SQLFragment | db.ParentColumn>;
      timetz?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      arrtimetz?: db.TimeTzString[] | db.Parameter<db.TimeTzString[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString[] | db.Parameter<db.TimeTzString[]> | db.SQLFragment | db.ParentColumn>;
      timestamp?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      arrtimestamp?: (db.TimestampString | Date)[] | db.Parameter<(db.TimestampString | Date)[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date)[] | db.Parameter<(db.TimestampString | Date)[]> | db.SQLFragment | db.ParentColumn>;
      timestamptz?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      arrtimestamptz?: (db.TimestampTzString | Date)[] | db.Parameter<(db.TimestampTzString | Date)[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date)[] | db.Parameter<(db.TimestampTzString | Date)[]> | db.SQLFragment | db.ParentColumn>;
      interval?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      int4range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn>;
      int8range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn>;
      numrange?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn>;
      tsrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn>;
      tstzrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn>;
      daterange?: db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn>;
      bytea?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      int8?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      money?: (number | string) | db.Parameter<(number | string)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | string) | db.Parameter<(number | string)> | db.SQLFragment | db.ParentColumn>;
      numeric?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment;
      arrdate?: (db.DateString | Date)[] | db.Parameter<(db.DateString | Date)[]> | null | db.DefaultType | db.SQLFragment;
      time?: db.TimeString | db.Parameter<db.TimeString> | null | db.DefaultType | db.SQLFragment;
      arrtime?: db.TimeString[] | db.Parameter<db.TimeString[]> | null | db.DefaultType | db.SQLFragment;
      timetz?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment;
      arrtimetz?: db.TimeTzString[] | db.Parameter<db.TimeTzString[]> | null | db.DefaultType | db.SQLFragment;
      timestamp?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment;
      arrtimestamp?: (db.TimestampString | Date)[] | db.Parameter<(db.TimestampString | Date)[]> | null | db.DefaultType | db.SQLFragment;
      timestamptz?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      arrtimestamptz?: (db.TimestampTzString | Date)[] | db.Parameter<(db.TimestampTzString | Date)[]> | null | db.DefaultType | db.SQLFragment;
      interval?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      int4range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment;
      int8range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment;
      numrange?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment;
      tsrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment;
      tstzrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment;
      daterange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment;
      bytea?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | null | db.DefaultType | db.SQLFragment;
      int8?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      money?: (number | string) | db.Parameter<(number | string)> | null | db.DefaultType | db.SQLFragment;
      numeric?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment>;
      arrdate?: (db.DateString | Date)[] | db.Parameter<(db.DateString | Date)[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date)[] | db.Parameter<(db.DateString | Date)[]> | null | db.DefaultType | db.SQLFragment>;
      time?: db.TimeString | db.Parameter<db.TimeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeString | db.Parameter<db.TimeString> | null | db.DefaultType | db.SQLFragment>;
      arrtime?: db.TimeString[] | db.Parameter<db.TimeString[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeString[] | db.Parameter<db.TimeString[]> | null | db.DefaultType | db.SQLFragment>;
      timetz?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment>;
      arrtimetz?: db.TimeTzString[] | db.Parameter<db.TimeTzString[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString[] | db.Parameter<db.TimeTzString[]> | null | db.DefaultType | db.SQLFragment>;
      timestamp?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment>;
      arrtimestamp?: (db.TimestampString | Date)[] | db.Parameter<(db.TimestampString | Date)[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date)[] | db.Parameter<(db.TimestampString | Date)[]> | null | db.DefaultType | db.SQLFragment>;
      timestamptz?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      arrtimestamptz?: (db.TimestampTzString | Date)[] | db.Parameter<(db.TimestampTzString | Date)[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date)[] | db.Parameter<(db.TimestampTzString | Date)[]> | null | db.DefaultType | db.SQLFragment>;
      interval?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      int4range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment>;
      int8range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment>;
      numrange?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment>;
      tsrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment>;
      tstzrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment>;
      daterange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment>;
      bytea?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | null | db.DefaultType | db.SQLFragment>;
      int8?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      money?: (number | string) | db.Parameter<(number | string)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | string) | db.Parameter<(number | string)> | null | db.DefaultType | db.SQLFragment>;
      numeric?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace subjectPhotos {
    export type Table = 'subjectPhotos';
    export interface Selectable {
      subjectId: number;
      photoId: number;
    }
    export interface JSONSelectable {
      subjectId: number;
      photoId: number;
    }
    export interface Whereable {
      subjectId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      photoId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      subjectId: number | db.Parameter<number> | db.SQLFragment;
      photoId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      subjectId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      photoId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'userphotosunique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace subjects {
    export type Table = 'subjects';
    export interface Selectable {
      subjectId: number;
      name: string;
    }
    export interface JSONSelectable {
      subjectId: number;
      name: string;
    }
    export interface Whereable {
      subjectId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      subjectId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      subjectId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'subjectsPkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace tags {
    export type Table = 'tags';
    export interface Selectable {
      tag: string;
      bookId: number;
    }
    export interface JSONSelectable {
      tag: string;
      bookId: number;
    }
    export interface Whereable {
      tag?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      bookId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      tag: string | db.Parameter<string> | db.SQLFragment;
      bookId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      tag?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      bookId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tagsUniqueIdx';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace testview {
    export type Table = 'testview';
    export interface Selectable {
      id: number | null;
      name: string | null;
      isLiving: boolean | null;
    }
    export interface JSONSelectable {
      id: number | null;
      name: string | null;
      isLiving: boolean | null;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      isLiving?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace testviewnoins {
    export type Table = 'testviewnoins';
    export interface Selectable {
      lower: string | null;
    }
    export interface JSONSelectable {
      lower: string | null;
    }
    export interface Whereable {
      lower?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace words {
    export type Table = 'words';
    export interface Selectable {
      word: string;
    }
    export interface JSONSelectable {
      word: string;
    }
    export interface Whereable {
      word?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = appleTransactions.Table | authors.Table | bankAccounts.Table | books.Table | bools.Table | chapters.Table | chat.Table | customTypes.Table | dimensions.Table | emailAuthentication.Table | employees.Table | files.Table | identityTest.Table | images.Table | int8test.Table | matBooks.Table | matCustom.Table | nameCounts.Table | numericTest.Table | orderProducts.Table | orders.Table | paragraphs.Table | photos.Table | products.Table | stores.Table | stringreturning.Table | subjectPhotos.Table | subjects.Table | tags.Table | testview.Table | testviewnoins.Table | words.Table;
    export type Selectable = appleTransactions.Selectable | authors.Selectable | bankAccounts.Selectable | books.Selectable | bools.Selectable | chapters.Selectable | chat.Selectable | customTypes.Selectable | dimensions.Selectable | emailAuthentication.Selectable | employees.Selectable | files.Selectable | identityTest.Selectable | images.Selectable | int8test.Selectable | matBooks.Selectable | matCustom.Selectable | nameCounts.Selectable | numericTest.Selectable | orderProducts.Selectable | orders.Selectable | paragraphs.Selectable | photos.Selectable | products.Selectable | stores.Selectable | stringreturning.Selectable | subjectPhotos.Selectable | subjects.Selectable | tags.Selectable | testview.Selectable | testviewnoins.Selectable | words.Selectable;
    export type JSONSelectable = appleTransactions.JSONSelectable | authors.JSONSelectable | bankAccounts.JSONSelectable | books.JSONSelectable | bools.JSONSelectable | chapters.JSONSelectable | chat.JSONSelectable | customTypes.JSONSelectable | dimensions.JSONSelectable | emailAuthentication.JSONSelectable | employees.JSONSelectable | files.JSONSelectable | identityTest.JSONSelectable | images.JSONSelectable | int8test.JSONSelectable | matBooks.JSONSelectable | matCustom.JSONSelectable | nameCounts.JSONSelectable | numericTest.JSONSelectable | orderProducts.JSONSelectable | orders.JSONSelectable | paragraphs.JSONSelectable | photos.JSONSelectable | products.JSONSelectable | stores.JSONSelectable | stringreturning.JSONSelectable | subjectPhotos.JSONSelectable | subjects.JSONSelectable | tags.JSONSelectable | testview.JSONSelectable | testviewnoins.JSONSelectable | words.JSONSelectable;
    export type Whereable = appleTransactions.Whereable | authors.Whereable | bankAccounts.Whereable | books.Whereable | bools.Whereable | chapters.Whereable | chat.Whereable | customTypes.Whereable | dimensions.Whereable | emailAuthentication.Whereable | employees.Whereable | files.Whereable | identityTest.Whereable | images.Whereable | int8test.Whereable | matBooks.Whereable | matCustom.Whereable | nameCounts.Whereable | numericTest.Whereable | orderProducts.Whereable | orders.Whereable | paragraphs.Whereable | photos.Whereable | products.Whereable | stores.Whereable | stringreturning.Whereable | subjectPhotos.Whereable | subjects.Whereable | tags.Whereable | testview.Whereable | testviewnoins.Whereable | words.Whereable;
    export type Insertable = appleTransactions.Insertable | authors.Insertable | bankAccounts.Insertable | books.Insertable | bools.Insertable | chapters.Insertable | chat.Insertable | customTypes.Insertable | dimensions.Insertable | emailAuthentication.Insertable | employees.Insertable | files.Insertable | identityTest.Insertable | images.Insertable | int8test.Insertable | matBooks.Insertable | matCustom.Insertable | nameCounts.Insertable | numericTest.Insertable | orderProducts.Insertable | orders.Insertable | paragraphs.Insertable | photos.Insertable | products.Insertable | stores.Insertable | stringreturning.Insertable | subjectPhotos.Insertable | subjects.Insertable | tags.Insertable | testview.Insertable | testviewnoins.Insertable | words.Insertable;
    export type Updatable = appleTransactions.Updatable | authors.Updatable | bankAccounts.Updatable | books.Updatable | bools.Updatable | chapters.Updatable | chat.Updatable | customTypes.Updatable | dimensions.Updatable | emailAuthentication.Updatable | employees.Updatable | files.Updatable | identityTest.Updatable | images.Updatable | int8test.Updatable | matBooks.Updatable | matCustom.Updatable | nameCounts.Updatable | numericTest.Updatable | orderProducts.Updatable | orders.Updatable | paragraphs.Updatable | photos.Updatable | products.Updatable | stores.Updatable | stringreturning.Updatable | subjectPhotos.Updatable | subjects.Updatable | tags.Updatable | testview.Updatable | testviewnoins.Updatable | words.Updatable;
    export type UniqueIndex = appleTransactions.UniqueIndex | authors.UniqueIndex | bankAccounts.UniqueIndex | books.UniqueIndex | bools.UniqueIndex | chapters.UniqueIndex | chat.UniqueIndex | customTypes.UniqueIndex | dimensions.UniqueIndex | emailAuthentication.UniqueIndex | employees.UniqueIndex | files.UniqueIndex | identityTest.UniqueIndex | images.UniqueIndex | int8test.UniqueIndex | matBooks.UniqueIndex | matCustom.UniqueIndex | nameCounts.UniqueIndex | numericTest.UniqueIndex | orderProducts.UniqueIndex | orders.UniqueIndex | paragraphs.UniqueIndex | photos.UniqueIndex | products.UniqueIndex | stores.UniqueIndex | stringreturning.UniqueIndex | subjectPhotos.UniqueIndex | subjects.UniqueIndex | tags.UniqueIndex | testview.UniqueIndex | testviewnoins.UniqueIndex | words.UniqueIndex;
    export type Column = appleTransactions.Column | authors.Column | bankAccounts.Column | books.Column | bools.Column | chapters.Column | chat.Column | customTypes.Column | dimensions.Column | emailAuthentication.Column | employees.Column | files.Column | identityTest.Column | images.Column | int8test.Column | matBooks.Column | matCustom.Column | nameCounts.Column | numericTest.Column | orderProducts.Column | orders.Column | paragraphs.Column | photos.Column | products.Column | stores.Column | stringreturning.Column | subjectPhotos.Column | subjects.Column | tags.Column | testview.Column | testviewnoins.Column | words.Column;
  
    export type AllBaseTables = [appleTransactions.Table, authors.Table, bankAccounts.Table, books.Table, bools.Table, chapters.Table, chat.Table, customTypes.Table, dimensions.Table, emailAuthentication.Table, employees.Table, files.Table, identityTest.Table, images.Table, int8test.Table, nameCounts.Table, numericTest.Table, orderProducts.Table, orders.Table, paragraphs.Table, photos.Table, products.Table, stores.Table, stringreturning.Table, subjectPhotos.Table, subjects.Table, tags.Table];
    export type AllForeignTables = [words.Table];
    export type AllViews = [testview.Table, testviewnoins.Table];
    export type AllMaterializedViews = [matBooks.Table, matCustom.Table];
    export type AllTablesAndViews = [appleTransactions.Table, authors.Table, bankAccounts.Table, books.Table, bools.Table, chapters.Table, chat.Table, customTypes.Table, dimensions.Table, emailAuthentication.Table, employees.Table, files.Table, identityTest.Table, images.Table, int8test.Table, matBooks.Table, matCustom.Table, nameCounts.Table, numericTest.Table, orderProducts.Table, orders.Table, paragraphs.Table, photos.Table, products.Table, stores.Table, stringreturning.Table, subjectPhotos.Table, subjects.Table, tags.Table, testview.Table, testviewnoins.Table, words.Table];
  }



  /* === schema: extra === */

  export namespace extra {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    export namespace tableInOtherSchema {
      export type Table = 'extra.tableInOtherSchema';
      export interface Selectable {
        id: number;
        details: string | null;
      }
      export interface JSONSelectable {
        id: number;
        details: string | null;
      }
      export interface Whereable {
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        details?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        details?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        details?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'tableInOtherSchemaPkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = tableInOtherSchema.Table;
    export type Selectable = tableInOtherSchema.Selectable;
    export type JSONSelectable = tableInOtherSchema.JSONSelectable;
    export type Whereable = tableInOtherSchema.Whereable;
    export type Insertable = tableInOtherSchema.Insertable;
    export type Updatable = tableInOtherSchema.Updatable;
    export type UniqueIndex = tableInOtherSchema.UniqueIndex;
    export type Column = tableInOtherSchema.Column;
  
    export type AllBaseTables = [tableInOtherSchema.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [tableInOtherSchema.Table];
  }


  /* === schema: UK === */

  export namespace UK {
  
    /* --- enums --- */
  
    export type nations = 'England' | 'Northern Ireland' | 'Scotland' | 'Wales';
    export namespace every {
      export type nations = ['England', 'Northern Ireland', 'Scotland', 'Wales'];
    }
    export type parties = 'Conservative' | 'Green' | 'Labour' | 'Other';
    export namespace every {
      export type parties = ['Conservative', 'Green', 'Labour', 'Other'];
    }
  
    /* --- tables --- */
  
    export namespace constituencies {
      export type Table = 'UK.constituencies';
      export interface Selectable {
        constituencyId: number;
        constituencyName: string;
        nation: nations;
        updatedAt: Date;
      }
      export interface JSONSelectable {
        constituencyId: number;
        constituencyName: string;
        nation: nations;
        updatedAt: db.TimestampTzString;
      }
      export interface Whereable {
        constituencyId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        constituencyName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        nation?: nations | db.Parameter<nations> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, nations | db.Parameter<nations> | db.SQLFragment | db.ParentColumn>;
        updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        constituencyId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        constituencyName: string | db.Parameter<string> | db.SQLFragment;
        nation: nations | db.Parameter<nations> | db.SQLFragment;
      }
      export interface Updatable {
        constituencyId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        constituencyName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        nation?: nations | db.Parameter<nations> | db.SQLFragment | db.SQLFragment<any, nations | db.Parameter<nations> | db.SQLFragment>;
      }
      export type UniqueIndex = 'constituenciesPkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace mps {
      export type Table = 'UK.mps';
      export interface Selectable {
        mpId: number;
        mpName: string;
        party: parties;
        constituencyId: number;
      }
      export interface JSONSelectable {
        mpId: number;
        mpName: string;
        party: parties;
        constituencyId: number;
      }
      export interface Whereable {
        mpId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        mpName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        party?: parties | db.Parameter<parties> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, parties | db.Parameter<parties> | db.SQLFragment | db.ParentColumn>;
        constituencyId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        mpId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        mpName: string | db.Parameter<string> | db.SQLFragment;
        party: parties | db.Parameter<parties> | db.SQLFragment;
        constituencyId: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        mpId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        mpName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        party?: parties | db.Parameter<parties> | db.SQLFragment | db.SQLFragment<any, parties | db.Parameter<parties> | db.SQLFragment>;
        constituencyId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'mpsPkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = constituencies.Table | mps.Table;
    export type Selectable = constituencies.Selectable | mps.Selectable;
    export type JSONSelectable = constituencies.JSONSelectable | mps.JSONSelectable;
    export type Whereable = constituencies.Whereable | mps.Whereable;
    export type Insertable = constituencies.Insertable | mps.Insertable;
    export type Updatable = constituencies.Updatable | mps.Updatable;
    export type UniqueIndex = constituencies.UniqueIndex | mps.UniqueIndex;
    export type Column = constituencies.Column | mps.Column;
  
    export type AllBaseTables = [constituencies.Table, mps.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [constituencies.Table, mps.Table];
  }


  /* === schema: US === */

  export namespace US {
  
    /* --- enums --- */
  
    export type parties = 'Democrat' | 'Green' | 'Other' | 'Republican';
    export namespace every {
      export type parties = ['Democrat', 'Green', 'Other', 'Republican'];
    }
  
    /* --- tables --- */
  
    export namespace districts {
      export type Table = 'US.districts';
      export interface Selectable {
        districtId: number;
        stateId: string;
        ordinality: number;
      }
      export interface JSONSelectable {
        districtId: number;
        stateId: string;
        ordinality: number;
      }
      export interface Whereable {
        districtId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        stateId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        ordinality?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        districtId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        stateId: string | db.Parameter<string> | db.SQLFragment;
        ordinality: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        districtId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        stateId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        ordinality?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'districtsPkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace representatives {
      export type Table = 'US.representatives';
      export interface Selectable {
        representativeId: number;
        representativeName: string;
        party: parties;
        districtId: number;
      }
      export interface JSONSelectable {
        representativeId: number;
        representativeName: string;
        party: parties;
        districtId: number;
      }
      export interface Whereable {
        representativeId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        representativeName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        party?: parties | db.Parameter<parties> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, parties | db.Parameter<parties> | db.SQLFragment | db.ParentColumn>;
        districtId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        representativeId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        representativeName: string | db.Parameter<string> | db.SQLFragment;
        party: parties | db.Parameter<parties> | db.SQLFragment;
        districtId: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        representativeId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        representativeName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        party?: parties | db.Parameter<parties> | db.SQLFragment | db.SQLFragment<any, parties | db.Parameter<parties> | db.SQLFragment>;
        districtId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'representativesPkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace states {
      export type Table = 'US.states';
      export interface Selectable {
        stateId: string;
        stateName: string;
      }
      export interface JSONSelectable {
        stateId: string;
        stateName: string;
      }
      export interface Whereable {
        stateId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        stateName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        stateId: string | db.Parameter<string> | db.SQLFragment;
        stateName: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        stateId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        stateName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'statesPkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = districts.Table | representatives.Table | states.Table;
    export type Selectable = districts.Selectable | representatives.Selectable | states.Selectable;
    export type JSONSelectable = districts.JSONSelectable | representatives.JSONSelectable | states.JSONSelectable;
    export type Whereable = districts.Whereable | representatives.Whereable | states.Whereable;
    export type Insertable = districts.Insertable | representatives.Insertable | states.Insertable;
    export type Updatable = districts.Updatable | representatives.Updatable | states.Updatable;
    export type UniqueIndex = districts.UniqueIndex | representatives.UniqueIndex | states.UniqueIndex;
    export type Column = districts.Column | representatives.Column | states.Column;
  
    export type AllBaseTables = [districts.Table, representatives.Table, states.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [districts.Table, representatives.Table, states.Table];
  }


  /* === schema: empty === */

  export namespace empty {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
    /* (none) */
  
    /* --- aggregate types --- */
  
    // `never` rather than `any` types would be more accurate in this no-tables case, but they stop `shortcuts.ts` compiling
  
    export type Table = never;
    export type Selectable = never;
    export type JSONSelectable = never;
    export type Whereable = never;
    export type Insertable = never;
    export type Updatable = never;
    export type UniqueIndex = never;
    export type Column = never;
  
    export type AllBaseTables = [];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [];
  }


  /* === global aggregate types === */

  export type Schema = 'public' | 'extra' | 'UK' | 'US' | 'empty';
  export type Table = public.Table | extra.Table | UK.Table | US.Table | empty.Table;
  export type Selectable = public.Selectable | extra.Selectable | UK.Selectable | US.Selectable | empty.Selectable;
  export type JSONSelectable = public.JSONSelectable | extra.JSONSelectable | UK.JSONSelectable | US.JSONSelectable | empty.JSONSelectable;
  export type Whereable = public.Whereable | extra.Whereable | UK.Whereable | US.Whereable | empty.Whereable;
  export type Insertable = public.Insertable | extra.Insertable | UK.Insertable | US.Insertable | empty.Insertable;
  export type Updatable = public.Updatable | extra.Updatable | UK.Updatable | US.Updatable | empty.Updatable;
  export type UniqueIndex = public.UniqueIndex | extra.UniqueIndex | UK.UniqueIndex | US.UniqueIndex | empty.UniqueIndex;
  export type Column = public.Column | extra.Column | UK.Column | US.Column | empty.Column;

  export type AllSchemas = ['public', 'extra', 'UK', 'US', 'empty'];
  export type AllBaseTables = [...public.AllBaseTables, ...extra.AllBaseTables, ...UK.AllBaseTables, ...US.AllBaseTables, ...empty.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables, ...extra.AllForeignTables, ...UK.AllForeignTables, ...US.AllForeignTables, ...empty.AllForeignTables];
  export type AllViews = [...public.AllViews, ...extra.AllViews, ...UK.AllViews, ...US.AllViews, ...empty.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews, ...extra.AllMaterializedViews, ...UK.AllMaterializedViews, ...US.AllMaterializedViews, ...empty.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews, ...extra.AllTablesAndViews, ...UK.AllTablesAndViews, ...US.AllTablesAndViews, ...empty.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Selectable;
    "authors": authors.Selectable;
    "bankAccounts": bankAccounts.Selectable;
    "books": books.Selectable;
    "bools": bools.Selectable;
    "chapters": chapters.Selectable;
    "chat": chat.Selectable;
    "customTypes": customTypes.Selectable;
    "dimensions": dimensions.Selectable;
    "emailAuthentication": emailAuthentication.Selectable;
    "employees": employees.Selectable;
    "files": files.Selectable;
    "identityTest": identityTest.Selectable;
    "images": images.Selectable;
    "int8test": int8test.Selectable;
    "matBooks": matBooks.Selectable;
    "matCustom": matCustom.Selectable;
    "nameCounts": nameCounts.Selectable;
    "numericTest": numericTest.Selectable;
    "orderProducts": orderProducts.Selectable;
    "orders": orders.Selectable;
    "paragraphs": paragraphs.Selectable;
    "photos": photos.Selectable;
    "products": products.Selectable;
    "stores": stores.Selectable;
    "stringreturning": stringreturning.Selectable;
    "subjectPhotos": subjectPhotos.Selectable;
    "subjects": subjects.Selectable;
    "tags": tags.Selectable;
    "testview": testview.Selectable;
    "testviewnoins": testviewnoins.Selectable;
    "words": words.Selectable;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.Selectable;
    "UK.constituencies": UK.constituencies.Selectable;
    "UK.mps": UK.mps.Selectable;
    "US.districts": US.districts.Selectable;
    "US.representatives": US.representatives.Selectable;
    "US.states": US.states.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.JSONSelectable;
    "authors": authors.JSONSelectable;
    "bankAccounts": bankAccounts.JSONSelectable;
    "books": books.JSONSelectable;
    "bools": bools.JSONSelectable;
    "chapters": chapters.JSONSelectable;
    "chat": chat.JSONSelectable;
    "customTypes": customTypes.JSONSelectable;
    "dimensions": dimensions.JSONSelectable;
    "emailAuthentication": emailAuthentication.JSONSelectable;
    "employees": employees.JSONSelectable;
    "files": files.JSONSelectable;
    "identityTest": identityTest.JSONSelectable;
    "images": images.JSONSelectable;
    "int8test": int8test.JSONSelectable;
    "matBooks": matBooks.JSONSelectable;
    "matCustom": matCustom.JSONSelectable;
    "nameCounts": nameCounts.JSONSelectable;
    "numericTest": numericTest.JSONSelectable;
    "orderProducts": orderProducts.JSONSelectable;
    "orders": orders.JSONSelectable;
    "paragraphs": paragraphs.JSONSelectable;
    "photos": photos.JSONSelectable;
    "products": products.JSONSelectable;
    "stores": stores.JSONSelectable;
    "stringreturning": stringreturning.JSONSelectable;
    "subjectPhotos": subjectPhotos.JSONSelectable;
    "subjects": subjects.JSONSelectable;
    "tags": tags.JSONSelectable;
    "testview": testview.JSONSelectable;
    "testviewnoins": testviewnoins.JSONSelectable;
    "words": words.JSONSelectable;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.JSONSelectable;
    "UK.constituencies": UK.constituencies.JSONSelectable;
    "UK.mps": UK.mps.JSONSelectable;
    "US.districts": US.districts.JSONSelectable;
    "US.representatives": US.representatives.JSONSelectable;
    "US.states": US.states.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Whereable;
    "authors": authors.Whereable;
    "bankAccounts": bankAccounts.Whereable;
    "books": books.Whereable;
    "bools": bools.Whereable;
    "chapters": chapters.Whereable;
    "chat": chat.Whereable;
    "customTypes": customTypes.Whereable;
    "dimensions": dimensions.Whereable;
    "emailAuthentication": emailAuthentication.Whereable;
    "employees": employees.Whereable;
    "files": files.Whereable;
    "identityTest": identityTest.Whereable;
    "images": images.Whereable;
    "int8test": int8test.Whereable;
    "matBooks": matBooks.Whereable;
    "matCustom": matCustom.Whereable;
    "nameCounts": nameCounts.Whereable;
    "numericTest": numericTest.Whereable;
    "orderProducts": orderProducts.Whereable;
    "orders": orders.Whereable;
    "paragraphs": paragraphs.Whereable;
    "photos": photos.Whereable;
    "products": products.Whereable;
    "stores": stores.Whereable;
    "stringreturning": stringreturning.Whereable;
    "subjectPhotos": subjectPhotos.Whereable;
    "subjects": subjects.Whereable;
    "tags": tags.Whereable;
    "testview": testview.Whereable;
    "testviewnoins": testviewnoins.Whereable;
    "words": words.Whereable;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.Whereable;
    "UK.constituencies": UK.constituencies.Whereable;
    "UK.mps": UK.mps.Whereable;
    "US.districts": US.districts.Whereable;
    "US.representatives": US.representatives.Whereable;
    "US.states": US.states.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Insertable;
    "authors": authors.Insertable;
    "bankAccounts": bankAccounts.Insertable;
    "books": books.Insertable;
    "bools": bools.Insertable;
    "chapters": chapters.Insertable;
    "chat": chat.Insertable;
    "customTypes": customTypes.Insertable;
    "dimensions": dimensions.Insertable;
    "emailAuthentication": emailAuthentication.Insertable;
    "employees": employees.Insertable;
    "files": files.Insertable;
    "identityTest": identityTest.Insertable;
    "images": images.Insertable;
    "int8test": int8test.Insertable;
    "matBooks": matBooks.Insertable;
    "matCustom": matCustom.Insertable;
    "nameCounts": nameCounts.Insertable;
    "numericTest": numericTest.Insertable;
    "orderProducts": orderProducts.Insertable;
    "orders": orders.Insertable;
    "paragraphs": paragraphs.Insertable;
    "photos": photos.Insertable;
    "products": products.Insertable;
    "stores": stores.Insertable;
    "stringreturning": stringreturning.Insertable;
    "subjectPhotos": subjectPhotos.Insertable;
    "subjects": subjects.Insertable;
    "tags": tags.Insertable;
    "testview": testview.Insertable;
    "testviewnoins": testviewnoins.Insertable;
    "words": words.Insertable;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.Insertable;
    "UK.constituencies": UK.constituencies.Insertable;
    "UK.mps": UK.mps.Insertable;
    "US.districts": US.districts.Insertable;
    "US.representatives": US.representatives.Insertable;
    "US.states": US.states.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Updatable;
    "authors": authors.Updatable;
    "bankAccounts": bankAccounts.Updatable;
    "books": books.Updatable;
    "bools": bools.Updatable;
    "chapters": chapters.Updatable;
    "chat": chat.Updatable;
    "customTypes": customTypes.Updatable;
    "dimensions": dimensions.Updatable;
    "emailAuthentication": emailAuthentication.Updatable;
    "employees": employees.Updatable;
    "files": files.Updatable;
    "identityTest": identityTest.Updatable;
    "images": images.Updatable;
    "int8test": int8test.Updatable;
    "matBooks": matBooks.Updatable;
    "matCustom": matCustom.Updatable;
    "nameCounts": nameCounts.Updatable;
    "numericTest": numericTest.Updatable;
    "orderProducts": orderProducts.Updatable;
    "orders": orders.Updatable;
    "paragraphs": paragraphs.Updatable;
    "photos": photos.Updatable;
    "products": products.Updatable;
    "stores": stores.Updatable;
    "stringreturning": stringreturning.Updatable;
    "subjectPhotos": subjectPhotos.Updatable;
    "subjects": subjects.Updatable;
    "tags": tags.Updatable;
    "testview": testview.Updatable;
    "testviewnoins": testviewnoins.Updatable;
    "words": words.Updatable;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.Updatable;
    "UK.constituencies": UK.constituencies.Updatable;
    "UK.mps": UK.mps.Updatable;
    "US.districts": US.districts.Updatable;
    "US.representatives": US.representatives.Updatable;
    "US.states": US.states.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "appleTransactions": appleTransactions.UniqueIndex;
    "authors": authors.UniqueIndex;
    "bankAccounts": bankAccounts.UniqueIndex;
    "books": books.UniqueIndex;
    "bools": bools.UniqueIndex;
    "chapters": chapters.UniqueIndex;
    "chat": chat.UniqueIndex;
    "customTypes": customTypes.UniqueIndex;
    "dimensions": dimensions.UniqueIndex;
    "emailAuthentication": emailAuthentication.UniqueIndex;
    "employees": employees.UniqueIndex;
    "files": files.UniqueIndex;
    "identityTest": identityTest.UniqueIndex;
    "images": images.UniqueIndex;
    "int8test": int8test.UniqueIndex;
    "matBooks": matBooks.UniqueIndex;
    "matCustom": matCustom.UniqueIndex;
    "nameCounts": nameCounts.UniqueIndex;
    "numericTest": numericTest.UniqueIndex;
    "orderProducts": orderProducts.UniqueIndex;
    "orders": orders.UniqueIndex;
    "paragraphs": paragraphs.UniqueIndex;
    "photos": photos.UniqueIndex;
    "products": products.UniqueIndex;
    "stores": stores.UniqueIndex;
    "stringreturning": stringreturning.UniqueIndex;
    "subjectPhotos": subjectPhotos.UniqueIndex;
    "subjects": subjects.UniqueIndex;
    "tags": tags.UniqueIndex;
    "testview": testview.UniqueIndex;
    "testviewnoins": testviewnoins.UniqueIndex;
    "words": words.UniqueIndex;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.UniqueIndex;
    "UK.constituencies": UK.constituencies.UniqueIndex;
    "UK.mps": UK.mps.UniqueIndex;
    "US.districts": US.districts.UniqueIndex;
    "US.representatives": US.representatives.UniqueIndex;
    "US.states": US.states.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Column;
    "authors": authors.Column;
    "bankAccounts": bankAccounts.Column;
    "books": books.Column;
    "bools": bools.Column;
    "chapters": chapters.Column;
    "chat": chat.Column;
    "customTypes": customTypes.Column;
    "dimensions": dimensions.Column;
    "emailAuthentication": emailAuthentication.Column;
    "employees": employees.Column;
    "files": files.Column;
    "identityTest": identityTest.Column;
    "images": images.Column;
    "int8test": int8test.Column;
    "matBooks": matBooks.Column;
    "matCustom": matCustom.Column;
    "nameCounts": nameCounts.Column;
    "numericTest": numericTest.Column;
    "orderProducts": orderProducts.Column;
    "orders": orders.Column;
    "paragraphs": paragraphs.Column;
    "photos": photos.Column;
    "products": products.Column;
    "stores": stores.Column;
    "stringreturning": stringreturning.Column;
    "subjectPhotos": subjectPhotos.Column;
    "subjects": subjects.Column;
    "tags": tags.Column;
    "testview": testview.Column;
    "testviewnoins": testviewnoins.Column;
    "words": words.Column;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.Column;
    "UK.constituencies": UK.constituencies.Column;
    "UK.mps": UK.mps.Column;
    "US.districts": US.districts.Column;
    "US.representatives": US.representatives.Column;
    "US.states": US.states.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "appleTransactions": appleTransactions.SQL;
    "authors": authors.SQL;
    "bankAccounts": bankAccounts.SQL;
    "books": books.SQL;
    "bools": bools.SQL;
    "chapters": chapters.SQL;
    "chat": chat.SQL;
    "customTypes": customTypes.SQL;
    "dimensions": dimensions.SQL;
    "emailAuthentication": emailAuthentication.SQL;
    "employees": employees.SQL;
    "files": files.SQL;
    "identityTest": identityTest.SQL;
    "images": images.SQL;
    "int8test": int8test.SQL;
    "matBooks": matBooks.SQL;
    "matCustom": matCustom.SQL;
    "nameCounts": nameCounts.SQL;
    "numericTest": numericTest.SQL;
    "orderProducts": orderProducts.SQL;
    "orders": orders.SQL;
    "paragraphs": paragraphs.SQL;
    "photos": photos.SQL;
    "products": products.SQL;
    "stores": stores.SQL;
    "stringreturning": stringreturning.SQL;
    "subjectPhotos": subjectPhotos.SQL;
    "subjects": subjects.SQL;
    "tags": tags.SQL;
    "testview": testview.SQL;
    "testviewnoins": testviewnoins.SQL;
    "words": words.SQL;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.SQL;
    "UK.constituencies": UK.constituencies.SQL;
    "UK.mps": UK.mps.SQL;
    "US.districts": US.districts.SQL;
    "US.representatives": US.representatives.SQL;
    "US.states": US.states.SQL;
  }[T];

}
