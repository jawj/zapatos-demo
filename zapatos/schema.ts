/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type appleEnvironment = 'PROD' | 'Sandbox';
  export namespace every {
    export type appleEnvironment = ['PROD', 'Sandbox'];
  }

  /* --- tables --- */

  /**
   * **appleTransactions**
   * - Table in database
   */
  export namespace appleTransactions {
    export type Table = 'appleTransactions';
    export interface Selectable {
      /**
      * **appleTransactions.environment**
      * - `appleEnvironment` in database
      * - `NOT NULL`, no default
      */
    environment: appleEnvironment;
      /**
      * **appleTransactions.originalTransactionId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    originalTransactionId: string;
      /**
      * **appleTransactions.accountId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    accountId: number;
      /**
      * **appleTransactions.latestReceiptData**
      * - `text` in database
      * - Nullable, no default
      */
    latestReceiptData: string | null;
    }
    export interface JSONSelectable {
      /**
      * **appleTransactions.environment**
      * - `appleEnvironment` in database
      * - `NOT NULL`, no default
      */
    environment: appleEnvironment;
      /**
      * **appleTransactions.originalTransactionId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    originalTransactionId: string;
      /**
      * **appleTransactions.accountId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    accountId: number;
      /**
      * **appleTransactions.latestReceiptData**
      * - `text` in database
      * - Nullable, no default
      */
    latestReceiptData: string | null;
    }
    export interface Whereable {
      /**
      * **appleTransactions.environment**
      * - `appleEnvironment` in database
      * - `NOT NULL`, no default
      */
    environment?: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.ParentColumn>;
      /**
      * **appleTransactions.originalTransactionId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    originalTransactionId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **appleTransactions.accountId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    accountId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **appleTransactions.latestReceiptData**
      * - `text` in database
      * - Nullable, no default
      */
    latestReceiptData?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **appleTransactions.environment**
      * - `appleEnvironment` in database
      * - `NOT NULL`, no default
      */
    environment: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment;
      /**
      * **appleTransactions.originalTransactionId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    originalTransactionId: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **appleTransactions.accountId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    accountId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **appleTransactions.latestReceiptData**
      * - `text` in database
      * - Nullable, no default
      */
    latestReceiptData?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **appleTransactions.environment**
      * - `appleEnvironment` in database
      * - `NOT NULL`, no default
      */
    environment?: appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment | db.SQLFragment<any, appleEnvironment | db.Parameter<appleEnvironment> | db.SQLFragment>;
      /**
      * **appleTransactions.originalTransactionId**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    originalTransactionId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **appleTransactions.accountId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    accountId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **appleTransactions.latestReceiptData**
      * - `text` in database
      * - Nullable, no default
      */
    latestReceiptData?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'appleTransPKey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **authors**
   * - Table in database
   */
  export namespace authors {
    export type Table = 'authors';
    export interface Selectable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
    id: number;
      /**
      * **authors.name**
      *
      * Full name of author
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string;
      /**
      * **authors.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
    isLiving: boolean | null;
    }
    export interface JSONSelectable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
    id: number;
      /**
      * **authors.name**
      *
      * Full name of author
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string;
      /**
      * **authors.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
    isLiving: boolean | null;
    }
    export interface Whereable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors.name**
      *
      * Full name of author
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **authors.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
    isLiving?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **authors.name**
      *
      * Full name of author
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **authors.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
    isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **authors.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('authors_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **authors.name**
      *
      * Full name of author
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **authors.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
    isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'authors_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **bankAccounts**
   * - Table in database
   */
  export namespace bankAccounts {
    export type Table = 'bankAccounts';
    export interface Selectable {
      /**
      * **bankAccounts.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"bankAccounts_id_seq"'::regclass)`
      */
    id: number;
      /**
      * **bankAccounts.balance**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    balance: number;
    }
    export interface JSONSelectable {
      /**
      * **bankAccounts.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"bankAccounts_id_seq"'::regclass)`
      */
    id: number;
      /**
      * **bankAccounts.balance**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    balance: number;
    }
    export interface Whereable {
      /**
      * **bankAccounts.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"bankAccounts_id_seq"'::regclass)`
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **bankAccounts.balance**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **bankAccounts.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"bankAccounts_id_seq"'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **bankAccounts.balance**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **bankAccounts.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"bankAccounts_id_seq"'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **bankAccounts.balance**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'bankAccounts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **books**
   * - Table in database
   */
  export namespace books {
    export type Table = 'books';
    export interface Selectable {
      /**
      * **books.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('books_id_seq'::regclass)`
      */
    id: number;
      /**
      * **books.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    authorId: number;
      /**
      * **books.title**
      * - `text` in database
      * - Nullable, no default
      */
    title: string | null;
      /**
      * **books.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    createdAt: Date;
      /**
      * **books.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    updatedAt: Date;
    }
    export interface JSONSelectable {
      /**
      * **books.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('books_id_seq'::regclass)`
      */
    id: number;
      /**
      * **books.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    authorId: number;
      /**
      * **books.title**
      * - `text` in database
      * - Nullable, no default
      */
    title: string | null;
      /**
      * **books.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    createdAt: db.TimestampTzString;
      /**
      * **books.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    updatedAt: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **books.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('books_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **books.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    authorId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **books.title**
      * - `text` in database
      * - Nullable, no default
      */
    title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **books.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **books.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **books.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('books_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **books.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    authorId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **books.title**
      * - `text` in database
      * - Nullable, no default
      */
    title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **books.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **books.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **books.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('books_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **books.authorId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    authorId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **books.title**
      * - `text` in database
      * - Nullable, no default
      */
    title?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **books.createdAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    createdAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **books.updatedAt**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'books_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **bools**
   * - Table in database
   */
  export namespace bools {
    export type Table = 'bools';
    export interface Selectable {
      /**
      * **bools.value**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
    value: boolean;
    }
    export interface JSONSelectable {
      /**
      * **bools.value**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
    value: boolean;
    }
    export interface Whereable {
      /**
      * **bools.value**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
    value?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **bools.value**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
    value?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **bools.value**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
    value?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **chapters**
   * - Table in database
   */
  export namespace chapters {
    export type Table = 'chapters';
    export interface Selectable {
      /**
      * **chapters.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('chapters_id_seq'::regclass)`
      */
    id: number;
      /**
      * **chapters.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    bookId: number;
    }
    export interface JSONSelectable {
      /**
      * **chapters.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('chapters_id_seq'::regclass)`
      */
    id: number;
      /**
      * **chapters.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    bookId: number;
    }
    export interface Whereable {
      /**
      * **chapters.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('chapters_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **chapters.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    bookId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **chapters.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('chapters_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **chapters.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    bookId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **chapters.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('chapters_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **chapters.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    bookId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'chapters_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **chat**
   * - Table in database
   */
  export namespace chat {
    export type Table = 'chat';
    export interface Selectable {
      /**
      * **chat.telegram_chat_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    telegram_chat_id: string;
      /**
      * **chat.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    created: Date;
      /**
      * **chat.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    updated: Date;
    }
    export interface JSONSelectable {
      /**
      * **chat.telegram_chat_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    telegram_chat_id: string;
      /**
      * **chat.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    created: db.TimestampTzString;
      /**
      * **chat.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    updated: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **chat.telegram_chat_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    telegram_chat_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **chat.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **chat.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    updated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **chat.telegram_chat_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    telegram_chat_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **chat.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **chat.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    updated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **chat.telegram_chat_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
    telegram_chat_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **chat.created**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    created?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **chat.updated**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `now()`
      */
    updated?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'chat_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **customTypes**
   * - Table in database
   */
  export namespace customTypes {
    export type Table = 'customTypes';
    export interface Selectable {
      /**
      * **customTypes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"customTypes_id_seq"'::regclass)`
      */
    id: number;
      /**
      * **customTypes.structuredDocument**
      * - `mySpecialJsonb` (base type: `jsonb`) in database
      * - Nullable, no default
      */
    structuredDocument: c.PgMySpecialJsonb | null;
      /**
      * **customTypes.location**
      * - `geometry` in database
      * - Nullable, no default
      */
    location: c.PgGeometry | null;
      /**
      * **customTypes.otherLocation**
      * - `mySpecialGeometry` (base type: `geometry`) in database
      * - Nullable, no default
      */
    otherLocation: c.PgMySpecialGeometry | null;
      /**
      * **customTypes.furtherLocations**
      * - `_mySpecialGeometry` in database
      * - Nullable, no default
      */
    furtherLocations: c.Pg_mySpecialGeometry | null;
      /**
      * **customTypes.name**
      * - `illegal/characters.text` (base type: `text`) in database
      * - Nullable, no default
      */
    name: c.PgIllegal_characters_text | null;
      /**
      * **customTypes.blah**
      * - `continue` (base type: `float4`) in database
      * - Nullable, no default
      */
    blah: c.PgContinue | null;
      /**
      * **customTypes.bar**
      * - `SQL` (base type: `text`) in database
      * - Nullable, no default
      */
    bar: c.PgSQL | null;
      /**
      * **customTypes.numbers**
      * - `_float4` in database
      * - Nullable, no default
      */
    numbers: number[] | null;
      /**
      * **customTypes.alsoName**
      * - `snake_cased_typename` (base type: `text`) in database
      * - Nullable, no default
      */
    alsoName: c.PgSnake_cased_typename | null;
    }
    export interface JSONSelectable {
      /**
      * **customTypes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"customTypes_id_seq"'::regclass)`
      */
    id: number;
      /**
      * **customTypes.structuredDocument**
      * - `mySpecialJsonb` (base type: `jsonb`) in database
      * - Nullable, no default
      */
    structuredDocument: c.PgMySpecialJsonb | null;
      /**
      * **customTypes.location**
      * - `geometry` in database
      * - Nullable, no default
      */
    location: c.PgGeometry | null;
      /**
      * **customTypes.otherLocation**
      * - `mySpecialGeometry` (base type: `geometry`) in database
      * - Nullable, no default
      */
    otherLocation: c.PgMySpecialGeometry | null;
      /**
      * **customTypes.furtherLocations**
      * - `_mySpecialGeometry` in database
      * - Nullable, no default
      */
    furtherLocations: c.Pg_mySpecialGeometry | null;
      /**
      * **customTypes.name**
      * - `illegal/characters.text` (base type: `text`) in database
      * - Nullable, no default
      */
    name: c.PgIllegal_characters_text | null;
      /**
      * **customTypes.blah**
      * - `continue` (base type: `float4`) in database
      * - Nullable, no default
      */
    blah: c.PgContinue | null;
      /**
      * **customTypes.bar**
      * - `SQL` (base type: `text`) in database
      * - Nullable, no default
      */
    bar: c.PgSQL | null;
      /**
      * **customTypes.numbers**
      * - `_float4` in database
      * - Nullable, no default
      */
    numbers: number[] | null;
      /**
      * **customTypes.alsoName**
      * - `snake_cased_typename` (base type: `text`) in database
      * - Nullable, no default
      */
    alsoName: c.PgSnake_cased_typename | null;
    }
    export interface Whereable {
      /**
      * **customTypes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"customTypes_id_seq"'::regclass)`
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customTypes.structuredDocument**
      * - `mySpecialJsonb` (base type: `jsonb`) in database
      * - Nullable, no default
      */
    structuredDocument?: c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customTypes.location**
      * - `geometry` in database
      * - Nullable, no default
      */
    location?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customTypes.otherLocation**
      * - `mySpecialGeometry` (base type: `geometry`) in database
      * - Nullable, no default
      */
    otherLocation?: c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customTypes.furtherLocations**
      * - `_mySpecialGeometry` in database
      * - Nullable, no default
      */
    furtherLocations?: c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customTypes.name**
      * - `illegal/characters.text` (base type: `text`) in database
      * - Nullable, no default
      */
    name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customTypes.blah**
      * - `continue` (base type: `float4`) in database
      * - Nullable, no default
      */
    blah?: c.PgContinue | db.Parameter<c.PgContinue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgContinue | db.Parameter<c.PgContinue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customTypes.bar**
      * - `SQL` (base type: `text`) in database
      * - Nullable, no default
      */
    bar?: c.PgSQL | db.Parameter<c.PgSQL> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgSQL | db.Parameter<c.PgSQL> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customTypes.numbers**
      * - `_float4` in database
      * - Nullable, no default
      */
    numbers?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customTypes.alsoName**
      * - `snake_cased_typename` (base type: `text`) in database
      * - Nullable, no default
      */
    alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **customTypes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"customTypes_id_seq"'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **customTypes.structuredDocument**
      * - `mySpecialJsonb` (base type: `jsonb`) in database
      * - Nullable, no default
      */
    structuredDocument?: c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customTypes.location**
      * - `geometry` in database
      * - Nullable, no default
      */
    location?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customTypes.otherLocation**
      * - `mySpecialGeometry` (base type: `geometry`) in database
      * - Nullable, no default
      */
    otherLocation?: c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customTypes.furtherLocations**
      * - `_mySpecialGeometry` in database
      * - Nullable, no default
      */
    furtherLocations?: c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customTypes.name**
      * - `illegal/characters.text` (base type: `text`) in database
      * - Nullable, no default
      */
    name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customTypes.blah**
      * - `continue` (base type: `float4`) in database
      * - Nullable, no default
      */
    blah?: c.PgContinue | db.Parameter<c.PgContinue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customTypes.bar**
      * - `SQL` (base type: `text`) in database
      * - Nullable, no default
      */
    bar?: c.PgSQL | db.Parameter<c.PgSQL> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customTypes.numbers**
      * - `_float4` in database
      * - Nullable, no default
      */
    numbers?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customTypes.alsoName**
      * - `snake_cased_typename` (base type: `text`) in database
      * - Nullable, no default
      */
    alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **customTypes.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('"customTypes_id_seq"'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **customTypes.structuredDocument**
      * - `mySpecialJsonb` (base type: `jsonb`) in database
      * - Nullable, no default
      */
    structuredDocument?: c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customTypes.location**
      * - `geometry` in database
      * - Nullable, no default
      */
    location?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customTypes.otherLocation**
      * - `mySpecialGeometry` (base type: `geometry`) in database
      * - Nullable, no default
      */
    otherLocation?: c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customTypes.furtherLocations**
      * - `_mySpecialGeometry` in database
      * - Nullable, no default
      */
    furtherLocations?: c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customTypes.name**
      * - `illegal/characters.text` (base type: `text`) in database
      * - Nullable, no default
      */
    name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customTypes.blah**
      * - `continue` (base type: `float4`) in database
      * - Nullable, no default
      */
    blah?: c.PgContinue | db.Parameter<c.PgContinue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgContinue | db.Parameter<c.PgContinue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customTypes.bar**
      * - `SQL` (base type: `text`) in database
      * - Nullable, no default
      */
    bar?: c.PgSQL | db.Parameter<c.PgSQL> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgSQL | db.Parameter<c.PgSQL> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customTypes.numbers**
      * - `_float4` in database
      * - Nullable, no default
      */
    numbers?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customTypes.alsoName**
      * - `snake_cased_typename` (base type: `text`) in database
      * - Nullable, no default
      */
    alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'customTypes_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **dimensions**
   * - Table in database
   */
  export namespace dimensions {
    export type Table = 'dimensions';
    export interface Selectable {
      /**
      * **dimensions.default_id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    default_id: number;
      /**
      * **dimensions.always_id**
      * - `int4` in database
      * - Generated column
      */
    always_id: number;
      /**
      * **dimensions.millimetres**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
    millimetres: number;
      /**
      * **dimensions.inches**
      * - `float4` in database
      * - Generated column
      */
    inches: number;
      /**
      * **dimensions.metres**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
    metres: number;
    }
    export interface JSONSelectable {
      /**
      * **dimensions.default_id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    default_id: number;
      /**
      * **dimensions.always_id**
      * - `int4` in database
      * - Generated column
      */
    always_id: number;
      /**
      * **dimensions.millimetres**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
    millimetres: number;
      /**
      * **dimensions.inches**
      * - `float4` in database
      * - Generated column
      */
    inches: number;
      /**
      * **dimensions.metres**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
    metres: number;
    }
    export interface Whereable {
      /**
      * **dimensions.default_id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    default_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dimensions.always_id**
      * - `int4` in database
      * - Generated column
      */
    always_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dimensions.millimetres**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
    millimetres?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dimensions.inches**
      * - `float4` in database
      * - Generated column
      */
    inches?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dimensions.metres**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
    metres?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **dimensions.default_id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    default_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **dimensions.millimetres**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
    millimetres: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **dimensions.default_id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    default_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **dimensions.millimetres**
      * - `float4` in database
      * - `NOT NULL`, no default
      */
    millimetres?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'dimensions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **emailAuthentication**
   * - Table in database
   */
  export namespace emailAuthentication {
    export type Table = 'emailAuthentication';
    export interface Selectable {
      /**
      * **emailAuthentication.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    email: string;
      /**
      * **emailAuthentication.consecutiveFailedLogins**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    consecutiveFailedLogins: number;
      /**
      * **emailAuthentication.lastFailedLogin**
      * - `timestamptz` in database
      * - Nullable, no default
      */
    lastFailedLogin: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **emailAuthentication.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    email: string;
      /**
      * **emailAuthentication.consecutiveFailedLogins**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    consecutiveFailedLogins: number;
      /**
      * **emailAuthentication.lastFailedLogin**
      * - `timestamptz` in database
      * - Nullable, no default
      */
    lastFailedLogin: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **emailAuthentication.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **emailAuthentication.consecutiveFailedLogins**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    consecutiveFailedLogins?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **emailAuthentication.lastFailedLogin**
      * - `timestamptz` in database
      * - Nullable, no default
      */
    lastFailedLogin?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **emailAuthentication.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **emailAuthentication.consecutiveFailedLogins**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    consecutiveFailedLogins?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **emailAuthentication.lastFailedLogin**
      * - `timestamptz` in database
      * - Nullable, no default
      */
    lastFailedLogin?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **emailAuthentication.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **emailAuthentication.consecutiveFailedLogins**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
    consecutiveFailedLogins?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **emailAuthentication.lastFailedLogin**
      * - `timestamptz` in database
      * - Nullable, no default
      */
    lastFailedLogin?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'emailAuthentication_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **employees**
   * - Table in database
   */
  export namespace employees {
    export type Table = 'employees';
    export interface Selectable {
      /**
      * **employees.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('employees_id_seq'::regclass)`
      */
    id: number;
      /**
      * **employees.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string;
      /**
      * **employees.managerId**
      * - `int4` in database
      * - Nullable, no default
      */
    managerId: number | null;
    }
    export interface JSONSelectable {
      /**
      * **employees.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('employees_id_seq'::regclass)`
      */
    id: number;
      /**
      * **employees.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string;
      /**
      * **employees.managerId**
      * - `int4` in database
      * - Nullable, no default
      */
    managerId: number | null;
    }
    export interface Whereable {
      /**
      * **employees.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('employees_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **employees.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **employees.managerId**
      * - `int4` in database
      * - Nullable, no default
      */
    managerId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **employees.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('employees_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **employees.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **employees.managerId**
      * - `int4` in database
      * - Nullable, no default
      */
    managerId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **employees.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('employees_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **employees.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **employees.managerId**
      * - `int4` in database
      * - Nullable, no default
      */
    managerId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'employees_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **files**
   * - Table in database
   */
  export namespace files {
    export type Table = 'files';
    export interface Selectable {
      /**
      * **files.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('files_id_seq'::regclass)`
      */
    id: number;
      /**
      * **files.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
    created_at: Date;
      /**
      * **files.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
    updated_at: Date;
      /**
      * **files.path**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    path: string;
    }
    export interface JSONSelectable {
      /**
      * **files.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('files_id_seq'::regclass)`
      */
    id: number;
      /**
      * **files.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
    created_at: db.TimestampTzString;
      /**
      * **files.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
    updated_at: db.TimestampTzString;
      /**
      * **files.path**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    path: string;
    }
    export interface Whereable {
      /**
      * **files.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('files_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **files.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
    created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **files.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
    updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **files.path**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    path?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **files.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('files_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **files.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
    created_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **files.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
    updated_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      /**
      * **files.path**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    path: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **files.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('files_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **files.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
    created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **files.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, no default
      */
    updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      /**
      * **files.path**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    path?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'files_path_key' | 'files_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **identityTest**
   * - Table in database
   */
  export namespace identityTest {
    export type Table = 'identityTest';
    export interface Selectable {
      /**
      * **identityTest.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id: number;
      /**
      * **identityTest.data**
      * - `text` in database
      * - Nullable, no default
      */
    data: string | null;
    }
    export interface JSONSelectable {
      /**
      * **identityTest.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id: number;
      /**
      * **identityTest.data**
      * - `text` in database
      * - Nullable, no default
      */
    data: string | null;
    }
    export interface Whereable {
      /**
      * **identityTest.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **identityTest.data**
      * - `text` in database
      * - Nullable, no default
      */
    data?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **identityTest.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **identityTest.data**
      * - `text` in database
      * - Nullable, no default
      */
    data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **identityTest.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **identityTest.data**
      * - `text` in database
      * - Nullable, no default
      */
    data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'identityTest_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **images**
   * - Table in database
   */
  export namespace images {
    export type Table = 'images';
    export interface Selectable {
      /**
      * **images.file_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    file_id: number;
      /**
      * **images.width**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    width: number;
      /**
      * **images.height**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    height: number;
    }
    export interface JSONSelectable {
      /**
      * **images.file_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    file_id: number;
      /**
      * **images.width**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    width: number;
      /**
      * **images.height**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    height: number;
    }
    export interface Whereable {
      /**
      * **images.file_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    file_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **images.width**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    width?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **images.height**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    height?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **images.file_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    file_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **images.width**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    width: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **images.height**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    height: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **images.file_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    file_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **images.width**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    width?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **images.height**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    height?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'images_file_id_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **int8test**
   * - Table in database
   */
  export namespace int8test {
    export type Table = 'int8test';
    export interface Selectable {
      /**
      * **int8test.num**
      * - `int8` in database
      * - Nullable, no default
      */
    num: db.Int8String | null;
    }
    export interface JSONSelectable {
      /**
      * **int8test.num**
      * - `int8` in database
      * - Nullable, no default
      */
    num: number | null;
    }
    export interface Whereable {
      /**
      * **int8test.num**
      * - `int8` in database
      * - Nullable, no default
      */
    num?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **int8test.num**
      * - `int8` in database
      * - Nullable, no default
      */
    num?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **int8test.num**
      * - `int8` in database
      * - Nullable, no default
      */
    num?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **matBooks**
   * - Materialized view in database
   */
  export namespace matBooks {
    export type Table = 'matBooks';
    export interface Selectable {
      /**
      * **matBooks.name**
      * - `text` in database
      * - Materialized view column
      */
    name: string | null;
      /**
      * **matBooks.title**
      *
      * Full title of book
      * - `text` in database
      * - Materialized view column
      */
    title: string | null;
    }
    export interface JSONSelectable {
      /**
      * **matBooks.name**
      * - `text` in database
      * - Materialized view column
      */
    name: string | null;
      /**
      * **matBooks.title**
      *
      * Full title of book
      * - `text` in database
      * - Materialized view column
      */
    title: string | null;
    }
    export interface Whereable {
      /**
      * **matBooks.name**
      * - `text` in database
      * - Materialized view column
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matBooks.title**
      *
      * Full title of book
      * - `text` in database
      * - Materialized view column
      */
    title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **matCustom**
   * - Materialized view in database
   */
  export namespace matCustom {
    export type Table = 'matCustom';
    export interface Selectable {
      /**
      * **matCustom.id**
      * - `int4` in database
      * - Materialized view column
      */
    id: number | null;
      /**
      * **matCustom.structuredDocument**
      * - `mySpecialJsonb` (base type: `jsonb`) in database
      * - Materialized view column
      */
    structuredDocument: c.PgMySpecialJsonb | null;
      /**
      * **matCustom.location**
      * - `geometry` in database
      * - Materialized view column
      */
    location: c.PgGeometry | null;
      /**
      * **matCustom.otherLocation**
      * - `mySpecialGeometry` (base type: `geometry`) in database
      * - Materialized view column
      */
    otherLocation: c.PgMySpecialGeometry | null;
      /**
      * **matCustom.furtherLocations**
      * - `_mySpecialGeometry` in database
      * - Materialized view column
      */
    furtherLocations: c.Pg_mySpecialGeometry | null;
      /**
      * **matCustom.name**
      * - `illegal/characters.text` (base type: `text`) in database
      * - Materialized view column
      */
    name: c.PgIllegal_characters_text | null;
      /**
      * **matCustom.blah**
      * - `continue` (base type: `float4`) in database
      * - Materialized view column
      */
    blah: c.PgContinue | null;
      /**
      * **matCustom.bar**
      * - `SQL` (base type: `text`) in database
      * - Materialized view column
      */
    bar: c.PgSQL | null;
      /**
      * **matCustom.numbers**
      * - `_float4` in database
      * - Materialized view column
      */
    numbers: number[] | null;
      /**
      * **matCustom.alsoName**
      * - `snake_cased_typename` (base type: `text`) in database
      * - Materialized view column
      */
    alsoName: c.PgSnake_cased_typename | null;
    }
    export interface JSONSelectable {
      /**
      * **matCustom.id**
      * - `int4` in database
      * - Materialized view column
      */
    id: number | null;
      /**
      * **matCustom.structuredDocument**
      * - `mySpecialJsonb` (base type: `jsonb`) in database
      * - Materialized view column
      */
    structuredDocument: c.PgMySpecialJsonb | null;
      /**
      * **matCustom.location**
      * - `geometry` in database
      * - Materialized view column
      */
    location: c.PgGeometry | null;
      /**
      * **matCustom.otherLocation**
      * - `mySpecialGeometry` (base type: `geometry`) in database
      * - Materialized view column
      */
    otherLocation: c.PgMySpecialGeometry | null;
      /**
      * **matCustom.furtherLocations**
      * - `_mySpecialGeometry` in database
      * - Materialized view column
      */
    furtherLocations: c.Pg_mySpecialGeometry | null;
      /**
      * **matCustom.name**
      * - `illegal/characters.text` (base type: `text`) in database
      * - Materialized view column
      */
    name: c.PgIllegal_characters_text | null;
      /**
      * **matCustom.blah**
      * - `continue` (base type: `float4`) in database
      * - Materialized view column
      */
    blah: c.PgContinue | null;
      /**
      * **matCustom.bar**
      * - `SQL` (base type: `text`) in database
      * - Materialized view column
      */
    bar: c.PgSQL | null;
      /**
      * **matCustom.numbers**
      * - `_float4` in database
      * - Materialized view column
      */
    numbers: number[] | null;
      /**
      * **matCustom.alsoName**
      * - `snake_cased_typename` (base type: `text`) in database
      * - Materialized view column
      */
    alsoName: c.PgSnake_cased_typename | null;
    }
    export interface Whereable {
      /**
      * **matCustom.id**
      * - `int4` in database
      * - Materialized view column
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matCustom.structuredDocument**
      * - `mySpecialJsonb` (base type: `jsonb`) in database
      * - Materialized view column
      */
    structuredDocument?: c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMySpecialJsonb | db.Parameter<c.PgMySpecialJsonb> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matCustom.location**
      * - `geometry` in database
      * - Materialized view column
      */
    location?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matCustom.otherLocation**
      * - `mySpecialGeometry` (base type: `geometry`) in database
      * - Materialized view column
      */
    otherLocation?: c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgMySpecialGeometry | db.Parameter<c.PgMySpecialGeometry> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matCustom.furtherLocations**
      * - `_mySpecialGeometry` in database
      * - Materialized view column
      */
    furtherLocations?: c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.Pg_mySpecialGeometry | db.Parameter<c.Pg_mySpecialGeometry> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matCustom.name**
      * - `illegal/characters.text` (base type: `text`) in database
      * - Materialized view column
      */
    name?: c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgIllegal_characters_text | db.Parameter<c.PgIllegal_characters_text> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matCustom.blah**
      * - `continue` (base type: `float4`) in database
      * - Materialized view column
      */
    blah?: c.PgContinue | db.Parameter<c.PgContinue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgContinue | db.Parameter<c.PgContinue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matCustom.bar**
      * - `SQL` (base type: `text`) in database
      * - Materialized view column
      */
    bar?: c.PgSQL | db.Parameter<c.PgSQL> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgSQL | db.Parameter<c.PgSQL> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matCustom.numbers**
      * - `_float4` in database
      * - Materialized view column
      */
    numbers?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **matCustom.alsoName**
      * - `snake_cased_typename` (base type: `text`) in database
      * - Materialized view column
      */
    alsoName?: c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgSnake_cased_typename | db.Parameter<c.PgSnake_cased_typename> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **nameCounts**
   * - Table in database
   */
  export namespace nameCounts {
    export type Table = 'nameCounts';
    export interface Selectable {
      /**
      * **nameCounts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string;
      /**
      * **nameCounts.count**
      * - `int4` in database
      * - Nullable, no default
      */
    count: number | null;
    }
    export interface JSONSelectable {
      /**
      * **nameCounts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string;
      /**
      * **nameCounts.count**
      * - `int4` in database
      * - Nullable, no default
      */
    count: number | null;
    }
    export interface Whereable {
      /**
      * **nameCounts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **nameCounts.count**
      * - `int4` in database
      * - Nullable, no default
      */
    count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **nameCounts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **nameCounts.count**
      * - `int4` in database
      * - Nullable, no default
      */
    count?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **nameCounts.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **nameCounts.count**
      * - `int4` in database
      * - Nullable, no default
      */
    count?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'nameCounts_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **numeric_mview**
   * - Materialized view in database
   */
  export namespace numeric_mview {
    export type Table = 'numeric_mview';
    export interface Selectable {
      /**
      * **numeric_mview.col**
      * - `numeric` in database
      * - Materialized view column
      */
    col: number | null;
    }
    export interface JSONSelectable {
      /**
      * **numeric_mview.col**
      * - `numeric` in database
      * - Materialized view column
      */
    col: number | null;
    }
    export interface Whereable {
      /**
      * **numeric_mview.col**
      * - `numeric` in database
      * - Materialized view column
      */
    col?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **numeric_test**
   * - Table in database
   */
  export namespace numeric_test {
    export type Table = 'numeric_test';
    export interface Selectable {
      /**
      * **numeric_test.col**
      * - `numeric` in database
      * - Nullable, no default
      */
    col: number | null;
    }
    export interface JSONSelectable {
      /**
      * **numeric_test.col**
      * - `numeric` in database
      * - Nullable, no default
      */
    col: number | null;
    }
    export interface Whereable {
      /**
      * **numeric_test.col**
      * - `numeric` in database
      * - Nullable, no default
      */
    col?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **numeric_test.col**
      * - `numeric` in database
      * - Nullable, no default
      */
    col?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **numeric_test.col**
      * - `numeric` in database
      * - Nullable, no default
      */
    col?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **orderProducts**
   * - Table in database
   */
  export namespace orderProducts {
    export type Table = 'orderProducts';
    export interface Selectable {
      /**
      * **orderProducts.orderId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    orderId: number;
      /**
      * **orderProducts.productId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    productId: number;
    }
    export interface JSONSelectable {
      /**
      * **orderProducts.orderId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    orderId: number;
      /**
      * **orderProducts.productId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    productId: number;
    }
    export interface Whereable {
      /**
      * **orderProducts.orderId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    orderId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orderProducts.productId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    productId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **orderProducts.orderId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    orderId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **orderProducts.productId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    productId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **orderProducts.orderId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    orderId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **orderProducts.productId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    productId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **orders**
   * - Table in database
   */
  export namespace orders {
    export type Table = 'orders';
    export interface Selectable {
      /**
      * **orders.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id: number;
      /**
      * **orders.userEmail**
      * - `text` in database
      * - Nullable, no default
      */
    userEmail: string | null;
    }
    export interface JSONSelectable {
      /**
      * **orders.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id: number;
      /**
      * **orders.userEmail**
      * - `text` in database
      * - Nullable, no default
      */
    userEmail: string | null;
    }
    export interface Whereable {
      /**
      * **orders.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.userEmail**
      * - `text` in database
      * - Nullable, no default
      */
    userEmail?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **orders.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **orders.userEmail**
      * - `text` in database
      * - Nullable, no default
      */
    userEmail?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **orders.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.userEmail**
      * - `text` in database
      * - Nullable, no default
      */
    userEmail?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'orders_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **paragraphs**
   * - Table in database
   */
  export namespace paragraphs {
    export type Table = 'paragraphs';
    export interface Selectable {
      /**
      * **paragraphs.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('paragraphs_id_seq'::regclass)`
      */
    id: number;
      /**
      * **paragraphs.chapterId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    chapterId: number;
    }
    export interface JSONSelectable {
      /**
      * **paragraphs.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('paragraphs_id_seq'::regclass)`
      */
    id: number;
      /**
      * **paragraphs.chapterId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    chapterId: number;
    }
    export interface Whereable {
      /**
      * **paragraphs.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('paragraphs_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **paragraphs.chapterId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    chapterId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **paragraphs.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('paragraphs_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **paragraphs.chapterId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    chapterId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **paragraphs.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('paragraphs_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **paragraphs.chapterId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    chapterId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'paragraphs_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **photos**
   * - Table in database
   */
  export namespace photos {
    export type Table = 'photos';
    export interface Selectable {
      /**
      * **photos.photoId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    photoId: number;
      /**
      * **photos.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    url: string;
    }
    export interface JSONSelectable {
      /**
      * **photos.photoId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    photoId: number;
      /**
      * **photos.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    url: string;
    }
    export interface Whereable {
      /**
      * **photos.photoId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    photoId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **photos.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **photos.photoId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    photoId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **photos.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    url: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **photos.photoId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    photoId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **photos.url**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'photos_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **products**
   * - Table in database
   */
  export namespace products {
    export type Table = 'products';
    export interface Selectable {
      /**
      * **products.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id: number;
      /**
      * **products.productName**
      * - `text` in database
      * - Nullable, no default
      */
    productName: string | null;
    }
    export interface JSONSelectable {
      /**
      * **products.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id: number;
      /**
      * **products.productName**
      * - `text` in database
      * - Nullable, no default
      */
    productName: string | null;
    }
    export interface Whereable {
      /**
      * **products.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.productName**
      * - `text` in database
      * - Nullable, no default
      */
    productName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **products.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **products.productName**
      * - `text` in database
      * - Nullable, no default
      */
    productName?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **products.id**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **products.productName**
      * - `text` in database
      * - Nullable, no default
      */
    productName?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'products_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stores**
   * - Table in database
   */
  export namespace stores {
    export type Table = 'stores';
    export interface Selectable {
      /**
      * **stores.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stores_id_seq'::regclass)`
      */
    id: number;
      /**
      * **stores.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string;
      /**
      * **stores.geom**
      * - `geometry` in database
      * - `NOT NULL`, no default
      */
    geom: c.PgGeometry;
    }
    export interface JSONSelectable {
      /**
      * **stores.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stores_id_seq'::regclass)`
      */
    id: number;
      /**
      * **stores.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string;
      /**
      * **stores.geom**
      * - `geometry` in database
      * - `NOT NULL`, no default
      */
    geom: c.PgGeometry;
    }
    export interface Whereable {
      /**
      * **stores.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stores_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stores.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stores.geom**
      * - `geometry` in database
      * - `NOT NULL`, no default
      */
    geom?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stores.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stores_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **stores.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stores.geom**
      * - `geometry` in database
      * - `NOT NULL`, no default
      */
    geom: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stores.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('stores_id_seq'::regclass)`
      */
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **stores.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stores.geom**
      * - `geometry` in database
      * - `NOT NULL`, no default
      */
    geom?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment>;
    }
    export type UniqueIndex = 'stores_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stringreturning**
   * - Table in database
   */
  export namespace stringreturning {
    export type Table = 'stringreturning';
    export interface Selectable {
      /**
      * **stringreturning.date**
      * - `date` in database
      * - Nullable, no default
      */
    date: Date | null;
      /**
      * **stringreturning.arrdate**
      * - `_date` in database
      * - Nullable, no default
      */
    arrdate: Date[] | null;
      /**
      * **stringreturning.time**
      * - `time` in database
      * - Nullable, no default
      */
    time: db.TimeString | null;
      /**
      * **stringreturning.arrtime**
      * - `_time` in database
      * - Nullable, no default
      */
    arrtime: db.TimeString[] | null;
      /**
      * **stringreturning.timetz**
      * - `timetz` in database
      * - Nullable, no default
      */
    timetz: db.TimeTzString | null;
      /**
      * **stringreturning.arrtimetz**
      * - `_timetz` in database
      * - Nullable, no default
      */
    arrtimetz: db.TimeTzString[] | null;
      /**
      * **stringreturning.timestamp**
      * - `timestamp` in database
      * - Nullable, no default
      */
    timestamp: Date | null;
      /**
      * **stringreturning.arrtimestamp**
      * - `_timestamp` in database
      * - Nullable, no default
      */
    arrtimestamp: Date[] | null;
      /**
      * **stringreturning.timestamptz**
      * - `timestamptz` in database
      * - Nullable, no default
      */
    timestamptz: Date | null;
      /**
      * **stringreturning.arrtimestamptz**
      * - `_timestamptz` in database
      * - Nullable, no default
      */
    arrtimestamptz: Date[] | null;
      /**
      * **stringreturning.interval**
      * - `interval` in database
      * - Nullable, no default
      */
    interval: string | null;
      /**
      * **stringreturning.int4range**
      * - `int4range` in database
      * - Nullable, no default
      */
    int4range: db.NumberRangeString | null;
      /**
      * **stringreturning.int8range**
      * - `int8range` in database
      * - Nullable, no default
      */
    int8range: db.NumberRangeString | null;
      /**
      * **stringreturning.numrange**
      * - `numrange` in database
      * - Nullable, no default
      */
    numrange: db.NumberRangeString | null;
      /**
      * **stringreturning.tsrange**
      * - `tsrange` in database
      * - Nullable, no default
      */
    tsrange: db.DateRangeString | null;
      /**
      * **stringreturning.tstzrange**
      * - `tstzrange` in database
      * - Nullable, no default
      */
    tstzrange: db.DateRangeString | null;
      /**
      * **stringreturning.daterange**
      * - `daterange` in database
      * - Nullable, no default
      */
    daterange: db.DateRangeString | null;
      /**
      * **stringreturning.bytea**
      * - `bytea` in database
      * - Nullable, no default
      */
    bytea: Buffer | null;
      /**
      * **stringreturning.int8**
      * - `int8` in database
      * - Nullable, no default
      */
    int8: db.Int8String | null;
      /**
      * **stringreturning.money**
      * - `money` in database
      * - Nullable, no default
      */
    money: string | null;
      /**
      * **stringreturning.numeric**
      * - `numeric` in database
      * - Nullable, no default
      */
    numeric: number | null;
    }
    export interface JSONSelectable {
      /**
      * **stringreturning.date**
      * - `date` in database
      * - Nullable, no default
      */
    date: db.DateString | null;
      /**
      * **stringreturning.arrdate**
      * - `_date` in database
      * - Nullable, no default
      */
    arrdate: db.DateString[] | null;
      /**
      * **stringreturning.time**
      * - `time` in database
      * - Nullable, no default
      */
    time: db.TimeString | null;
      /**
      * **stringreturning.arrtime**
      * - `_time` in database
      * - Nullable, no default
      */
    arrtime: db.TimeString[] | null;
      /**
      * **stringreturning.timetz**
      * - `timetz` in database
      * - Nullable, no default
      */
    timetz: db.TimeTzString | null;
      /**
      * **stringreturning.arrtimetz**
      * - `_timetz` in database
      * - Nullable, no default
      */
    arrtimetz: db.TimeTzString[] | null;
      /**
      * **stringreturning.timestamp**
      * - `timestamp` in database
      * - Nullable, no default
      */
    timestamp: db.TimestampString | null;
      /**
      * **stringreturning.arrtimestamp**
      * - `_timestamp` in database
      * - Nullable, no default
      */
    arrtimestamp: db.TimestampString[] | null;
      /**
      * **stringreturning.timestamptz**
      * - `timestamptz` in database
      * - Nullable, no default
      */
    timestamptz: db.TimestampTzString | null;
      /**
      * **stringreturning.arrtimestamptz**
      * - `_timestamptz` in database
      * - Nullable, no default
      */
    arrtimestamptz: db.TimestampTzString[] | null;
      /**
      * **stringreturning.interval**
      * - `interval` in database
      * - Nullable, no default
      */
    interval: string | null;
      /**
      * **stringreturning.int4range**
      * - `int4range` in database
      * - Nullable, no default
      */
    int4range: db.NumberRangeString | null;
      /**
      * **stringreturning.int8range**
      * - `int8range` in database
      * - Nullable, no default
      */
    int8range: db.NumberRangeString | null;
      /**
      * **stringreturning.numrange**
      * - `numrange` in database
      * - Nullable, no default
      */
    numrange: db.NumberRangeString | null;
      /**
      * **stringreturning.tsrange**
      * - `tsrange` in database
      * - Nullable, no default
      */
    tsrange: db.DateRangeString | null;
      /**
      * **stringreturning.tstzrange**
      * - `tstzrange` in database
      * - Nullable, no default
      */
    tstzrange: db.DateRangeString | null;
      /**
      * **stringreturning.daterange**
      * - `daterange` in database
      * - Nullable, no default
      */
    daterange: db.DateRangeString | null;
      /**
      * **stringreturning.bytea**
      * - `bytea` in database
      * - Nullable, no default
      */
    bytea: db.ByteArrayString | null;
      /**
      * **stringreturning.int8**
      * - `int8` in database
      * - Nullable, no default
      */
    int8: number | null;
      /**
      * **stringreturning.money**
      * - `money` in database
      * - Nullable, no default
      */
    money: string | null;
      /**
      * **stringreturning.numeric**
      * - `numeric` in database
      * - Nullable, no default
      */
    numeric: number | null;
    }
    export interface Whereable {
      /**
      * **stringreturning.date**
      * - `date` in database
      * - Nullable, no default
      */
    date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.arrdate**
      * - `_date` in database
      * - Nullable, no default
      */
    arrdate?: (db.DateString | Date)[] | db.Parameter<(db.DateString | Date)[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date)[] | db.Parameter<(db.DateString | Date)[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.time**
      * - `time` in database
      * - Nullable, no default
      */
    time?: db.TimeString | db.Parameter<db.TimeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeString | db.Parameter<db.TimeString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.arrtime**
      * - `_time` in database
      * - Nullable, no default
      */
    arrtime?: db.TimeString[] | db.Parameter<db.TimeString[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeString[] | db.Parameter<db.TimeString[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.timetz**
      * - `timetz` in database
      * - Nullable, no default
      */
    timetz?: db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.arrtimetz**
      * - `_timetz` in database
      * - Nullable, no default
      */
    arrtimetz?: db.TimeTzString[] | db.Parameter<db.TimeTzString[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.TimeTzString[] | db.Parameter<db.TimeTzString[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.timestamp**
      * - `timestamp` in database
      * - Nullable, no default
      */
    timestamp?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.arrtimestamp**
      * - `_timestamp` in database
      * - Nullable, no default
      */
    arrtimestamp?: (db.TimestampString | Date)[] | db.Parameter<(db.TimestampString | Date)[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date)[] | db.Parameter<(db.TimestampString | Date)[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.timestamptz**
      * - `timestamptz` in database
      * - Nullable, no default
      */
    timestamptz?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.arrtimestamptz**
      * - `_timestamptz` in database
      * - Nullable, no default
      */
    arrtimestamptz?: (db.TimestampTzString | Date)[] | db.Parameter<(db.TimestampTzString | Date)[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date)[] | db.Parameter<(db.TimestampTzString | Date)[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.interval**
      * - `interval` in database
      * - Nullable, no default
      */
    interval?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.int4range**
      * - `int4range` in database
      * - Nullable, no default
      */
    int4range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.int8range**
      * - `int8range` in database
      * - Nullable, no default
      */
    int8range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.numrange**
      * - `numrange` in database
      * - Nullable, no default
      */
    numrange?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.tsrange**
      * - `tsrange` in database
      * - Nullable, no default
      */
    tsrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.tstzrange**
      * - `tstzrange` in database
      * - Nullable, no default
      */
    tstzrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.daterange**
      * - `daterange` in database
      * - Nullable, no default
      */
    daterange?: db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.bytea**
      * - `bytea` in database
      * - Nullable, no default
      */
    bytea?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.int8**
      * - `int8` in database
      * - Nullable, no default
      */
    int8?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.money**
      * - `money` in database
      * - Nullable, no default
      */
    money?: (number | string) | db.Parameter<(number | string)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | string) | db.Parameter<(number | string)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stringreturning.numeric**
      * - `numeric` in database
      * - Nullable, no default
      */
    numeric?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stringreturning.date**
      * - `date` in database
      * - Nullable, no default
      */
    date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.arrdate**
      * - `_date` in database
      * - Nullable, no default
      */
    arrdate?: (db.DateString | Date)[] | db.Parameter<(db.DateString | Date)[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.time**
      * - `time` in database
      * - Nullable, no default
      */
    time?: db.TimeString | db.Parameter<db.TimeString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.arrtime**
      * - `_time` in database
      * - Nullable, no default
      */
    arrtime?: db.TimeString[] | db.Parameter<db.TimeString[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.timetz**
      * - `timetz` in database
      * - Nullable, no default
      */
    timetz?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.arrtimetz**
      * - `_timetz` in database
      * - Nullable, no default
      */
    arrtimetz?: db.TimeTzString[] | db.Parameter<db.TimeTzString[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.timestamp**
      * - `timestamp` in database
      * - Nullable, no default
      */
    timestamp?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.arrtimestamp**
      * - `_timestamp` in database
      * - Nullable, no default
      */
    arrtimestamp?: (db.TimestampString | Date)[] | db.Parameter<(db.TimestampString | Date)[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.timestamptz**
      * - `timestamptz` in database
      * - Nullable, no default
      */
    timestamptz?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.arrtimestamptz**
      * - `_timestamptz` in database
      * - Nullable, no default
      */
    arrtimestamptz?: (db.TimestampTzString | Date)[] | db.Parameter<(db.TimestampTzString | Date)[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.interval**
      * - `interval` in database
      * - Nullable, no default
      */
    interval?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.int4range**
      * - `int4range` in database
      * - Nullable, no default
      */
    int4range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.int8range**
      * - `int8range` in database
      * - Nullable, no default
      */
    int8range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.numrange**
      * - `numrange` in database
      * - Nullable, no default
      */
    numrange?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.tsrange**
      * - `tsrange` in database
      * - Nullable, no default
      */
    tsrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.tstzrange**
      * - `tstzrange` in database
      * - Nullable, no default
      */
    tstzrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.daterange**
      * - `daterange` in database
      * - Nullable, no default
      */
    daterange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.bytea**
      * - `bytea` in database
      * - Nullable, no default
      */
    bytea?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.int8**
      * - `int8` in database
      * - Nullable, no default
      */
    int8?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.money**
      * - `money` in database
      * - Nullable, no default
      */
    money?: (number | string) | db.Parameter<(number | string)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stringreturning.numeric**
      * - `numeric` in database
      * - Nullable, no default
      */
    numeric?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stringreturning.date**
      * - `date` in database
      * - Nullable, no default
      */
    date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.arrdate**
      * - `_date` in database
      * - Nullable, no default
      */
    arrdate?: (db.DateString | Date)[] | db.Parameter<(db.DateString | Date)[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date)[] | db.Parameter<(db.DateString | Date)[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.time**
      * - `time` in database
      * - Nullable, no default
      */
    time?: db.TimeString | db.Parameter<db.TimeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeString | db.Parameter<db.TimeString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.arrtime**
      * - `_time` in database
      * - Nullable, no default
      */
    arrtime?: db.TimeString[] | db.Parameter<db.TimeString[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeString[] | db.Parameter<db.TimeString[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.timetz**
      * - `timetz` in database
      * - Nullable, no default
      */
    timetz?: db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString | db.Parameter<db.TimeTzString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.arrtimetz**
      * - `_timetz` in database
      * - Nullable, no default
      */
    arrtimetz?: db.TimeTzString[] | db.Parameter<db.TimeTzString[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.TimeTzString[] | db.Parameter<db.TimeTzString[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.timestamp**
      * - `timestamp` in database
      * - Nullable, no default
      */
    timestamp?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.arrtimestamp**
      * - `_timestamp` in database
      * - Nullable, no default
      */
    arrtimestamp?: (db.TimestampString | Date)[] | db.Parameter<(db.TimestampString | Date)[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date)[] | db.Parameter<(db.TimestampString | Date)[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.timestamptz**
      * - `timestamptz` in database
      * - Nullable, no default
      */
    timestamptz?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.arrtimestamptz**
      * - `_timestamptz` in database
      * - Nullable, no default
      */
    arrtimestamptz?: (db.TimestampTzString | Date)[] | db.Parameter<(db.TimestampTzString | Date)[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date)[] | db.Parameter<(db.TimestampTzString | Date)[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.interval**
      * - `interval` in database
      * - Nullable, no default
      */
    interval?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.int4range**
      * - `int4range` in database
      * - Nullable, no default
      */
    int4range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.int8range**
      * - `int8range` in database
      * - Nullable, no default
      */
    int8range?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.numrange**
      * - `numrange` in database
      * - Nullable, no default
      */
    numrange?: db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.NumberRangeString | db.Parameter<db.NumberRangeString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.tsrange**
      * - `tsrange` in database
      * - Nullable, no default
      */
    tsrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.tstzrange**
      * - `tstzrange` in database
      * - Nullable, no default
      */
    tstzrange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.daterange**
      * - `daterange` in database
      * - Nullable, no default
      */
    daterange?: db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.DateRangeString | db.Parameter<db.DateRangeString> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.bytea**
      * - `bytea` in database
      * - Nullable, no default
      */
    bytea?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.int8**
      * - `int8` in database
      * - Nullable, no default
      */
    int8?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.money**
      * - `money` in database
      * - Nullable, no default
      */
    money?: (number | string) | db.Parameter<(number | string)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | string) | db.Parameter<(number | string)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stringreturning.numeric**
      * - `numeric` in database
      * - Nullable, no default
      */
    numeric?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **subjectPhotos**
   * - Table in database
   */
  export namespace subjectPhotos {
    export type Table = 'subjectPhotos';
    export interface Selectable {
      /**
      * **subjectPhotos.subjectId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    subjectId: number;
      /**
      * **subjectPhotos.photoId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    photoId: number;
    }
    export interface JSONSelectable {
      /**
      * **subjectPhotos.subjectId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    subjectId: number;
      /**
      * **subjectPhotos.photoId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    photoId: number;
    }
    export interface Whereable {
      /**
      * **subjectPhotos.subjectId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    subjectId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **subjectPhotos.photoId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    photoId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **subjectPhotos.subjectId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    subjectId: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **subjectPhotos.photoId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    photoId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **subjectPhotos.subjectId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    subjectId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **subjectPhotos.photoId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    photoId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'userphotosunique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **subjects**
   * - Table in database
   */
  export namespace subjects {
    export type Table = 'subjects';
    export interface Selectable {
      /**
      * **subjects.subjectId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    subjectId: number;
      /**
      * **subjects.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string;
    }
    export interface JSONSelectable {
      /**
      * **subjects.subjectId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    subjectId: number;
      /**
      * **subjects.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string;
    }
    export interface Whereable {
      /**
      * **subjects.subjectId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    subjectId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **subjects.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **subjects.subjectId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    subjectId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **subjects.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **subjects.subjectId**
      * - `int4` in database
      * - `NOT NULL`, identity column
      */
    subjectId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **subjects.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'subjects_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **tags**
   * - Table in database
   */
  export namespace tags {
    export type Table = 'tags';
    export interface Selectable {
      /**
      * **tags.tag**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    tag: string;
      /**
      * **tags.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    bookId: number;
    }
    export interface JSONSelectable {
      /**
      * **tags.tag**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    tag: string;
      /**
      * **tags.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    bookId: number;
    }
    export interface Whereable {
      /**
      * **tags.tag**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    tag?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tags.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    bookId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tags.tag**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    tag: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **tags.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    bookId: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tags.tag**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    tag?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **tags.bookId**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
    bookId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'tagsUniqueIdx';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **testview**
   * - View in database
   */
  export namespace testview {
    export type Table = 'testview';
    export interface Selectable {
      /**
      * **testview.id**
      * - `int4` in database
      * - Nullable, no default
      */
    id: number | null;
      /**
      * **testview.name**
      * - `text` in database
      * - Nullable, no default
      */
    name: string | null;
      /**
      * **testview.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
    isLiving: boolean | null;
    }
    export interface JSONSelectable {
      /**
      * **testview.id**
      * - `int4` in database
      * - Nullable, no default
      */
    id: number | null;
      /**
      * **testview.name**
      * - `text` in database
      * - Nullable, no default
      */
    name: string | null;
      /**
      * **testview.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
    isLiving: boolean | null;
    }
    export interface Whereable {
      /**
      * **testview.id**
      * - `int4` in database
      * - Nullable, no default
      */
    id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **testview.name**
      * - `text` in database
      * - Nullable, no default
      */
    name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **testview.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
    isLiving?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **testview.id**
      * - `int4` in database
      * - Nullable, no default
      */
    id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **testview.name**
      * - `text` in database
      * - Nullable, no default
      */
    name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **testview.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
    isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **testview.id**
      * - `int4` in database
      * - Nullable, no default
      */
    id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **testview.name**
      * - `text` in database
      * - Nullable, no default
      */
    name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **testview.isLiving**
      * - `bool` in database
      * - Nullable, no default
      */
    isLiving?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **testviewnoins**
   * - View in database
   */
  export namespace testviewnoins {
    export type Table = 'testviewnoins';
    export interface Selectable {
      /**
      * **testviewnoins.lower**
      * - `text` in database
      * - Nullable, no default
      */
    lower: string | null;
    }
    export interface JSONSelectable {
      /**
      * **testviewnoins.lower**
      * - `text` in database
      * - Nullable, no default
      */
    lower: string | null;
    }
    export interface Whereable {
      /**
      * **testviewnoins.lower**
      * - `text` in database
      * - Nullable, no default
      */
    lower?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **words**
   * - Foreign table in database
   */
  export namespace words {
    export type Table = 'words';
    export interface Selectable {
      /**
      * **words.word**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    word: string;
    }
    export interface JSONSelectable {
      /**
      * **words.word**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    word: string;
    }
    export interface Whereable {
      /**
      * **words.word**
      * - `text` in database
      * - `NOT NULL`, no default
      */
    word?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = appleTransactions.Table | authors.Table | bankAccounts.Table | books.Table | bools.Table | chapters.Table | chat.Table | customTypes.Table | dimensions.Table | emailAuthentication.Table | employees.Table | files.Table | identityTest.Table | images.Table | int8test.Table | matBooks.Table | matCustom.Table | nameCounts.Table | numeric_mview.Table | numeric_test.Table | orderProducts.Table | orders.Table | paragraphs.Table | photos.Table | products.Table | stores.Table | stringreturning.Table | subjectPhotos.Table | subjects.Table | tags.Table | testview.Table | testviewnoins.Table | words.Table;
    export type Selectable = appleTransactions.Selectable | authors.Selectable | bankAccounts.Selectable | books.Selectable | bools.Selectable | chapters.Selectable | chat.Selectable | customTypes.Selectable | dimensions.Selectable | emailAuthentication.Selectable | employees.Selectable | files.Selectable | identityTest.Selectable | images.Selectable | int8test.Selectable | matBooks.Selectable | matCustom.Selectable | nameCounts.Selectable | numeric_mview.Selectable | numeric_test.Selectable | orderProducts.Selectable | orders.Selectable | paragraphs.Selectable | photos.Selectable | products.Selectable | stores.Selectable | stringreturning.Selectable | subjectPhotos.Selectable | subjects.Selectable | tags.Selectable | testview.Selectable | testviewnoins.Selectable | words.Selectable;
    export type JSONSelectable = appleTransactions.JSONSelectable | authors.JSONSelectable | bankAccounts.JSONSelectable | books.JSONSelectable | bools.JSONSelectable | chapters.JSONSelectable | chat.JSONSelectable | customTypes.JSONSelectable | dimensions.JSONSelectable | emailAuthentication.JSONSelectable | employees.JSONSelectable | files.JSONSelectable | identityTest.JSONSelectable | images.JSONSelectable | int8test.JSONSelectable | matBooks.JSONSelectable | matCustom.JSONSelectable | nameCounts.JSONSelectable | numeric_mview.JSONSelectable | numeric_test.JSONSelectable | orderProducts.JSONSelectable | orders.JSONSelectable | paragraphs.JSONSelectable | photos.JSONSelectable | products.JSONSelectable | stores.JSONSelectable | stringreturning.JSONSelectable | subjectPhotos.JSONSelectable | subjects.JSONSelectable | tags.JSONSelectable | testview.JSONSelectable | testviewnoins.JSONSelectable | words.JSONSelectable;
    export type Whereable = appleTransactions.Whereable | authors.Whereable | bankAccounts.Whereable | books.Whereable | bools.Whereable | chapters.Whereable | chat.Whereable | customTypes.Whereable | dimensions.Whereable | emailAuthentication.Whereable | employees.Whereable | files.Whereable | identityTest.Whereable | images.Whereable | int8test.Whereable | matBooks.Whereable | matCustom.Whereable | nameCounts.Whereable | numeric_mview.Whereable | numeric_test.Whereable | orderProducts.Whereable | orders.Whereable | paragraphs.Whereable | photos.Whereable | products.Whereable | stores.Whereable | stringreturning.Whereable | subjectPhotos.Whereable | subjects.Whereable | tags.Whereable | testview.Whereable | testviewnoins.Whereable | words.Whereable;
    export type Insertable = appleTransactions.Insertable | authors.Insertable | bankAccounts.Insertable | books.Insertable | bools.Insertable | chapters.Insertable | chat.Insertable | customTypes.Insertable | dimensions.Insertable | emailAuthentication.Insertable | employees.Insertable | files.Insertable | identityTest.Insertable | images.Insertable | int8test.Insertable | matBooks.Insertable | matCustom.Insertable | nameCounts.Insertable | numeric_mview.Insertable | numeric_test.Insertable | orderProducts.Insertable | orders.Insertable | paragraphs.Insertable | photos.Insertable | products.Insertable | stores.Insertable | stringreturning.Insertable | subjectPhotos.Insertable | subjects.Insertable | tags.Insertable | testview.Insertable | testviewnoins.Insertable | words.Insertable;
    export type Updatable = appleTransactions.Updatable | authors.Updatable | bankAccounts.Updatable | books.Updatable | bools.Updatable | chapters.Updatable | chat.Updatable | customTypes.Updatable | dimensions.Updatable | emailAuthentication.Updatable | employees.Updatable | files.Updatable | identityTest.Updatable | images.Updatable | int8test.Updatable | matBooks.Updatable | matCustom.Updatable | nameCounts.Updatable | numeric_mview.Updatable | numeric_test.Updatable | orderProducts.Updatable | orders.Updatable | paragraphs.Updatable | photos.Updatable | products.Updatable | stores.Updatable | stringreturning.Updatable | subjectPhotos.Updatable | subjects.Updatable | tags.Updatable | testview.Updatable | testviewnoins.Updatable | words.Updatable;
    export type UniqueIndex = appleTransactions.UniqueIndex | authors.UniqueIndex | bankAccounts.UniqueIndex | books.UniqueIndex | bools.UniqueIndex | chapters.UniqueIndex | chat.UniqueIndex | customTypes.UniqueIndex | dimensions.UniqueIndex | emailAuthentication.UniqueIndex | employees.UniqueIndex | files.UniqueIndex | identityTest.UniqueIndex | images.UniqueIndex | int8test.UniqueIndex | matBooks.UniqueIndex | matCustom.UniqueIndex | nameCounts.UniqueIndex | numeric_mview.UniqueIndex | numeric_test.UniqueIndex | orderProducts.UniqueIndex | orders.UniqueIndex | paragraphs.UniqueIndex | photos.UniqueIndex | products.UniqueIndex | stores.UniqueIndex | stringreturning.UniqueIndex | subjectPhotos.UniqueIndex | subjects.UniqueIndex | tags.UniqueIndex | testview.UniqueIndex | testviewnoins.UniqueIndex | words.UniqueIndex;
    export type Column = appleTransactions.Column | authors.Column | bankAccounts.Column | books.Column | bools.Column | chapters.Column | chat.Column | customTypes.Column | dimensions.Column | emailAuthentication.Column | employees.Column | files.Column | identityTest.Column | images.Column | int8test.Column | matBooks.Column | matCustom.Column | nameCounts.Column | numeric_mview.Column | numeric_test.Column | orderProducts.Column | orders.Column | paragraphs.Column | photos.Column | products.Column | stores.Column | stringreturning.Column | subjectPhotos.Column | subjects.Column | tags.Column | testview.Column | testviewnoins.Column | words.Column;
  
    export type AllBaseTables = [appleTransactions.Table, authors.Table, bankAccounts.Table, books.Table, bools.Table, chapters.Table, chat.Table, customTypes.Table, dimensions.Table, emailAuthentication.Table, employees.Table, files.Table, identityTest.Table, images.Table, int8test.Table, nameCounts.Table, numeric_test.Table, orderProducts.Table, orders.Table, paragraphs.Table, photos.Table, products.Table, stores.Table, stringreturning.Table, subjectPhotos.Table, subjects.Table, tags.Table];
    export type AllForeignTables = [words.Table];
    export type AllViews = [testview.Table, testviewnoins.Table];
    export type AllMaterializedViews = [matBooks.Table, matCustom.Table, numeric_mview.Table];
    export type AllTablesAndViews = [appleTransactions.Table, authors.Table, bankAccounts.Table, books.Table, bools.Table, chapters.Table, chat.Table, customTypes.Table, dimensions.Table, emailAuthentication.Table, employees.Table, files.Table, identityTest.Table, images.Table, int8test.Table, matBooks.Table, matCustom.Table, nameCounts.Table, numeric_mview.Table, numeric_test.Table, orderProducts.Table, orders.Table, paragraphs.Table, photos.Table, products.Table, stores.Table, stringreturning.Table, subjectPhotos.Table, subjects.Table, tags.Table, testview.Table, testviewnoins.Table, words.Table];
  }



  /* === schema: extra === */

  export namespace extra {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **extra.tableInOtherSchema**
     * - Table in database
     */
    export namespace tableInOtherSchema {
      export type Table = 'extra.tableInOtherSchema';
      export interface Selectable {
        /**
        * **extra.tableInOtherSchema.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('"tableInOtherSchema_id_seq"'::regclass)`
        */
      id: number;
        /**
        * **extra.tableInOtherSchema.details**
        * - `text` in database
        * - Nullable, no default
        */
      details: string | null;
      }
      export interface JSONSelectable {
        /**
        * **extra.tableInOtherSchema.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('"tableInOtherSchema_id_seq"'::regclass)`
        */
      id: number;
        /**
        * **extra.tableInOtherSchema.details**
        * - `text` in database
        * - Nullable, no default
        */
      details: string | null;
      }
      export interface Whereable {
        /**
        * **extra.tableInOtherSchema.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('"tableInOtherSchema_id_seq"'::regclass)`
        */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **extra.tableInOtherSchema.details**
        * - `text` in database
        * - Nullable, no default
        */
      details?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **extra.tableInOtherSchema.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('"tableInOtherSchema_id_seq"'::regclass)`
        */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **extra.tableInOtherSchema.details**
        * - `text` in database
        * - Nullable, no default
        */
      details?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **extra.tableInOtherSchema.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('"tableInOtherSchema_id_seq"'::regclass)`
        */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **extra.tableInOtherSchema.details**
        * - `text` in database
        * - Nullable, no default
        */
      details?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'tableInOtherSchema_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = tableInOtherSchema.Table;
    export type Selectable = tableInOtherSchema.Selectable;
    export type JSONSelectable = tableInOtherSchema.JSONSelectable;
    export type Whereable = tableInOtherSchema.Whereable;
    export type Insertable = tableInOtherSchema.Insertable;
    export type Updatable = tableInOtherSchema.Updatable;
    export type UniqueIndex = tableInOtherSchema.UniqueIndex;
    export type Column = tableInOtherSchema.Column;
  
    export type AllBaseTables = [tableInOtherSchema.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [tableInOtherSchema.Table];
  }


  /* === schema: UK === */

  export namespace UK {
  
    /* --- enums --- */
  
    export type nations = 'England' | 'Northern Ireland' | 'Scotland' | 'Wales';
    export namespace every {
      export type nations = ['England', 'Northern Ireland', 'Scotland', 'Wales'];
    }
    export type parties = 'Conservative' | 'Green' | 'Labour' | 'Other';
    export namespace every {
      export type parties = ['Conservative', 'Green', 'Labour', 'Other'];
    }
  
    /* --- tables --- */
  
    /**
     * **UK.constituencies**
     * - Table in database
     */
    export namespace constituencies {
      export type Table = 'UK.constituencies';
      export interface Selectable {
        /**
        * **UK.constituencies.constituencyId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      constituencyId: number;
        /**
        * **UK.constituencies.constituencyName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      constituencyName: string;
        /**
        * **UK.constituencies.nation**
        * - `nations` in database
        * - `NOT NULL`, no default
        */
      nation: nations;
        /**
        * **UK.constituencies.updatedAt**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
      updatedAt: Date;
      }
      export interface JSONSelectable {
        /**
        * **UK.constituencies.constituencyId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      constituencyId: number;
        /**
        * **UK.constituencies.constituencyName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      constituencyName: string;
        /**
        * **UK.constituencies.nation**
        * - `nations` in database
        * - `NOT NULL`, no default
        */
      nation: nations;
        /**
        * **UK.constituencies.updatedAt**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
      updatedAt: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **UK.constituencies.constituencyId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      constituencyId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **UK.constituencies.constituencyName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      constituencyName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **UK.constituencies.nation**
        * - `nations` in database
        * - `NOT NULL`, no default
        */
      nation?: nations | db.Parameter<nations> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, nations | db.Parameter<nations> | db.SQLFragment | db.ParentColumn>;
        /**
        * **UK.constituencies.updatedAt**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
      updatedAt?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **UK.constituencies.constituencyId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      constituencyId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **UK.constituencies.constituencyName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      constituencyName: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **UK.constituencies.nation**
        * - `nations` in database
        * - `NOT NULL`, no default
        */
      nation: nations | db.Parameter<nations> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **UK.constituencies.constituencyId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      constituencyId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **UK.constituencies.constituencyName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      constituencyName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **UK.constituencies.nation**
        * - `nations` in database
        * - `NOT NULL`, no default
        */
      nation?: nations | db.Parameter<nations> | db.SQLFragment | db.SQLFragment<any, nations | db.Parameter<nations> | db.SQLFragment>;
      }
      export type UniqueIndex = 'constituencies_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **UK.mps**
     * - Table in database
     */
    export namespace mps {
      export type Table = 'UK.mps';
      export interface Selectable {
        /**
        * **UK.mps.mpId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      mpId: number;
        /**
        * **UK.mps.mpName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      mpName: string;
        /**
        * **UK.mps.party**
        * - `parties` in database
        * - `NOT NULL`, no default
        */
      party: parties;
        /**
        * **UK.mps.constituencyId**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      constituencyId: number;
      }
      export interface JSONSelectable {
        /**
        * **UK.mps.mpId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      mpId: number;
        /**
        * **UK.mps.mpName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      mpName: string;
        /**
        * **UK.mps.party**
        * - `parties` in database
        * - `NOT NULL`, no default
        */
      party: parties;
        /**
        * **UK.mps.constituencyId**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      constituencyId: number;
      }
      export interface Whereable {
        /**
        * **UK.mps.mpId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      mpId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **UK.mps.mpName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      mpName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **UK.mps.party**
        * - `parties` in database
        * - `NOT NULL`, no default
        */
      party?: parties | db.Parameter<parties> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, parties | db.Parameter<parties> | db.SQLFragment | db.ParentColumn>;
        /**
        * **UK.mps.constituencyId**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      constituencyId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **UK.mps.mpId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      mpId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **UK.mps.mpName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      mpName: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **UK.mps.party**
        * - `parties` in database
        * - `NOT NULL`, no default
        */
      party: parties | db.Parameter<parties> | db.SQLFragment;
        /**
        * **UK.mps.constituencyId**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      constituencyId: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **UK.mps.mpId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      mpId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **UK.mps.mpName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      mpName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **UK.mps.party**
        * - `parties` in database
        * - `NOT NULL`, no default
        */
      party?: parties | db.Parameter<parties> | db.SQLFragment | db.SQLFragment<any, parties | db.Parameter<parties> | db.SQLFragment>;
        /**
        * **UK.mps.constituencyId**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      constituencyId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'mps_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = constituencies.Table | mps.Table;
    export type Selectable = constituencies.Selectable | mps.Selectable;
    export type JSONSelectable = constituencies.JSONSelectable | mps.JSONSelectable;
    export type Whereable = constituencies.Whereable | mps.Whereable;
    export type Insertable = constituencies.Insertable | mps.Insertable;
    export type Updatable = constituencies.Updatable | mps.Updatable;
    export type UniqueIndex = constituencies.UniqueIndex | mps.UniqueIndex;
    export type Column = constituencies.Column | mps.Column;
  
    export type AllBaseTables = [constituencies.Table, mps.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [constituencies.Table, mps.Table];
  }


  /* === schema: US === */

  export namespace US {
  
    /* --- enums --- */
  
    export type parties = 'Democrat' | 'Green' | 'Other' | 'Republican';
    export namespace every {
      export type parties = ['Democrat', 'Green', 'Other', 'Republican'];
    }
  
    /* --- tables --- */
  
    /**
     * **US.districts**
     * - Table in database
     */
    export namespace districts {
      export type Table = 'US.districts';
      export interface Selectable {
        /**
        * **US.districts.districtId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      districtId: number;
        /**
        * **US.districts.stateId**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateId: string;
        /**
        * **US.districts.ordinality**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      ordinality: number;
      }
      export interface JSONSelectable {
        /**
        * **US.districts.districtId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      districtId: number;
        /**
        * **US.districts.stateId**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateId: string;
        /**
        * **US.districts.ordinality**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      ordinality: number;
      }
      export interface Whereable {
        /**
        * **US.districts.districtId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      districtId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **US.districts.stateId**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **US.districts.ordinality**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      ordinality?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **US.districts.districtId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      districtId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **US.districts.stateId**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateId: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **US.districts.ordinality**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      ordinality: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **US.districts.districtId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      districtId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **US.districts.stateId**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **US.districts.ordinality**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      ordinality?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'districts_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **US.representatives**
     * - Table in database
     */
    export namespace representatives {
      export type Table = 'US.representatives';
      export interface Selectable {
        /**
        * **US.representatives.representativeId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      representativeId: number;
        /**
        * **US.representatives.representativeName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      representativeName: string;
        /**
        * **US.representatives.party**
        * - `parties` in database
        * - `NOT NULL`, no default
        */
      party: parties;
        /**
        * **US.representatives.districtId**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      districtId: number;
      }
      export interface JSONSelectable {
        /**
        * **US.representatives.representativeId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      representativeId: number;
        /**
        * **US.representatives.representativeName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      representativeName: string;
        /**
        * **US.representatives.party**
        * - `parties` in database
        * - `NOT NULL`, no default
        */
      party: parties;
        /**
        * **US.representatives.districtId**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      districtId: number;
      }
      export interface Whereable {
        /**
        * **US.representatives.representativeId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      representativeId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **US.representatives.representativeName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      representativeName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **US.representatives.party**
        * - `parties` in database
        * - `NOT NULL`, no default
        */
      party?: parties | db.Parameter<parties> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, parties | db.Parameter<parties> | db.SQLFragment | db.ParentColumn>;
        /**
        * **US.representatives.districtId**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      districtId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **US.representatives.representativeId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      representativeId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **US.representatives.representativeName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      representativeName: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **US.representatives.party**
        * - `parties` in database
        * - `NOT NULL`, no default
        */
      party: parties | db.Parameter<parties> | db.SQLFragment;
        /**
        * **US.representatives.districtId**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      districtId: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **US.representatives.representativeId**
        * - `int4` in database
        * - `NOT NULL`, identity column
        */
      representativeId?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **US.representatives.representativeName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      representativeName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **US.representatives.party**
        * - `parties` in database
        * - `NOT NULL`, no default
        */
      party?: parties | db.Parameter<parties> | db.SQLFragment | db.SQLFragment<any, parties | db.Parameter<parties> | db.SQLFragment>;
        /**
        * **US.representatives.districtId**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
      districtId?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'representatives_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **US.states**
     * - Table in database
     */
    export namespace states {
      export type Table = 'US.states';
      export interface Selectable {
        /**
        * **US.states.stateId**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateId: string;
        /**
        * **US.states.stateName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateName: string;
      }
      export interface JSONSelectable {
        /**
        * **US.states.stateId**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateId: string;
        /**
        * **US.states.stateName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateName: string;
      }
      export interface Whereable {
        /**
        * **US.states.stateId**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateId?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **US.states.stateName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateName?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **US.states.stateId**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateId: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **US.states.stateName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateName: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **US.states.stateId**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateId?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **US.states.stateName**
        * - `text` in database
        * - `NOT NULL`, no default
        */
      stateName?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'states_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = districts.Table | representatives.Table | states.Table;
    export type Selectable = districts.Selectable | representatives.Selectable | states.Selectable;
    export type JSONSelectable = districts.JSONSelectable | representatives.JSONSelectable | states.JSONSelectable;
    export type Whereable = districts.Whereable | representatives.Whereable | states.Whereable;
    export type Insertable = districts.Insertable | representatives.Insertable | states.Insertable;
    export type Updatable = districts.Updatable | representatives.Updatable | states.Updatable;
    export type UniqueIndex = districts.UniqueIndex | representatives.UniqueIndex | states.UniqueIndex;
    export type Column = districts.Column | representatives.Column | states.Column;
  
    export type AllBaseTables = [districts.Table, representatives.Table, states.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [districts.Table, representatives.Table, states.Table];
  }


  /* === schema: empty === */

  export namespace empty {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
    /* (none) */
  
    /* --- aggregate types --- */
  
    // `never` rather than `any` types would be more accurate in this no-tables case, but they stop `shortcuts.ts` compiling
  
    export type Table = never;
    export type Selectable = never;
    export type JSONSelectable = never;
    export type Whereable = never;
    export type Insertable = never;
    export type Updatable = never;
    export type UniqueIndex = never;
    export type Column = never;
  
    export type AllBaseTables = [];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [];
  }


  /* === global aggregate types === */

  export type Schema = 'public' | 'extra' | 'UK' | 'US' | 'empty';
  export type Table = public.Table | extra.Table | UK.Table | US.Table | empty.Table;
  export type Selectable = public.Selectable | extra.Selectable | UK.Selectable | US.Selectable | empty.Selectable;
  export type JSONSelectable = public.JSONSelectable | extra.JSONSelectable | UK.JSONSelectable | US.JSONSelectable | empty.JSONSelectable;
  export type Whereable = public.Whereable | extra.Whereable | UK.Whereable | US.Whereable | empty.Whereable;
  export type Insertable = public.Insertable | extra.Insertable | UK.Insertable | US.Insertable | empty.Insertable;
  export type Updatable = public.Updatable | extra.Updatable | UK.Updatable | US.Updatable | empty.Updatable;
  export type UniqueIndex = public.UniqueIndex | extra.UniqueIndex | UK.UniqueIndex | US.UniqueIndex | empty.UniqueIndex;
  export type Column = public.Column | extra.Column | UK.Column | US.Column | empty.Column;

  export type AllSchemas = ['public', 'extra', 'UK', 'US', 'empty'];
  export type AllBaseTables = [...public.AllBaseTables, ...extra.AllBaseTables, ...UK.AllBaseTables, ...US.AllBaseTables, ...empty.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables, ...extra.AllForeignTables, ...UK.AllForeignTables, ...US.AllForeignTables, ...empty.AllForeignTables];
  export type AllViews = [...public.AllViews, ...extra.AllViews, ...UK.AllViews, ...US.AllViews, ...empty.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews, ...extra.AllMaterializedViews, ...UK.AllMaterializedViews, ...US.AllMaterializedViews, ...empty.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews, ...extra.AllTablesAndViews, ...UK.AllTablesAndViews, ...US.AllTablesAndViews, ...empty.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Selectable;
    "authors": authors.Selectable;
    "bankAccounts": bankAccounts.Selectable;
    "books": books.Selectable;
    "bools": bools.Selectable;
    "chapters": chapters.Selectable;
    "chat": chat.Selectable;
    "customTypes": customTypes.Selectable;
    "dimensions": dimensions.Selectable;
    "emailAuthentication": emailAuthentication.Selectable;
    "employees": employees.Selectable;
    "files": files.Selectable;
    "identityTest": identityTest.Selectable;
    "images": images.Selectable;
    "int8test": int8test.Selectable;
    "matBooks": matBooks.Selectable;
    "matCustom": matCustom.Selectable;
    "nameCounts": nameCounts.Selectable;
    "numeric_mview": numeric_mview.Selectable;
    "numeric_test": numeric_test.Selectable;
    "orderProducts": orderProducts.Selectable;
    "orders": orders.Selectable;
    "paragraphs": paragraphs.Selectable;
    "photos": photos.Selectable;
    "products": products.Selectable;
    "stores": stores.Selectable;
    "stringreturning": stringreturning.Selectable;
    "subjectPhotos": subjectPhotos.Selectable;
    "subjects": subjects.Selectable;
    "tags": tags.Selectable;
    "testview": testview.Selectable;
    "testviewnoins": testviewnoins.Selectable;
    "words": words.Selectable;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.Selectable;
    "UK.constituencies": UK.constituencies.Selectable;
    "UK.mps": UK.mps.Selectable;
    "US.districts": US.districts.Selectable;
    "US.representatives": US.representatives.Selectable;
    "US.states": US.states.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.JSONSelectable;
    "authors": authors.JSONSelectable;
    "bankAccounts": bankAccounts.JSONSelectable;
    "books": books.JSONSelectable;
    "bools": bools.JSONSelectable;
    "chapters": chapters.JSONSelectable;
    "chat": chat.JSONSelectable;
    "customTypes": customTypes.JSONSelectable;
    "dimensions": dimensions.JSONSelectable;
    "emailAuthentication": emailAuthentication.JSONSelectable;
    "employees": employees.JSONSelectable;
    "files": files.JSONSelectable;
    "identityTest": identityTest.JSONSelectable;
    "images": images.JSONSelectable;
    "int8test": int8test.JSONSelectable;
    "matBooks": matBooks.JSONSelectable;
    "matCustom": matCustom.JSONSelectable;
    "nameCounts": nameCounts.JSONSelectable;
    "numeric_mview": numeric_mview.JSONSelectable;
    "numeric_test": numeric_test.JSONSelectable;
    "orderProducts": orderProducts.JSONSelectable;
    "orders": orders.JSONSelectable;
    "paragraphs": paragraphs.JSONSelectable;
    "photos": photos.JSONSelectable;
    "products": products.JSONSelectable;
    "stores": stores.JSONSelectable;
    "stringreturning": stringreturning.JSONSelectable;
    "subjectPhotos": subjectPhotos.JSONSelectable;
    "subjects": subjects.JSONSelectable;
    "tags": tags.JSONSelectable;
    "testview": testview.JSONSelectable;
    "testviewnoins": testviewnoins.JSONSelectable;
    "words": words.JSONSelectable;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.JSONSelectable;
    "UK.constituencies": UK.constituencies.JSONSelectable;
    "UK.mps": UK.mps.JSONSelectable;
    "US.districts": US.districts.JSONSelectable;
    "US.representatives": US.representatives.JSONSelectable;
    "US.states": US.states.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Whereable;
    "authors": authors.Whereable;
    "bankAccounts": bankAccounts.Whereable;
    "books": books.Whereable;
    "bools": bools.Whereable;
    "chapters": chapters.Whereable;
    "chat": chat.Whereable;
    "customTypes": customTypes.Whereable;
    "dimensions": dimensions.Whereable;
    "emailAuthentication": emailAuthentication.Whereable;
    "employees": employees.Whereable;
    "files": files.Whereable;
    "identityTest": identityTest.Whereable;
    "images": images.Whereable;
    "int8test": int8test.Whereable;
    "matBooks": matBooks.Whereable;
    "matCustom": matCustom.Whereable;
    "nameCounts": nameCounts.Whereable;
    "numeric_mview": numeric_mview.Whereable;
    "numeric_test": numeric_test.Whereable;
    "orderProducts": orderProducts.Whereable;
    "orders": orders.Whereable;
    "paragraphs": paragraphs.Whereable;
    "photos": photos.Whereable;
    "products": products.Whereable;
    "stores": stores.Whereable;
    "stringreturning": stringreturning.Whereable;
    "subjectPhotos": subjectPhotos.Whereable;
    "subjects": subjects.Whereable;
    "tags": tags.Whereable;
    "testview": testview.Whereable;
    "testviewnoins": testviewnoins.Whereable;
    "words": words.Whereable;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.Whereable;
    "UK.constituencies": UK.constituencies.Whereable;
    "UK.mps": UK.mps.Whereable;
    "US.districts": US.districts.Whereable;
    "US.representatives": US.representatives.Whereable;
    "US.states": US.states.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Insertable;
    "authors": authors.Insertable;
    "bankAccounts": bankAccounts.Insertable;
    "books": books.Insertable;
    "bools": bools.Insertable;
    "chapters": chapters.Insertable;
    "chat": chat.Insertable;
    "customTypes": customTypes.Insertable;
    "dimensions": dimensions.Insertable;
    "emailAuthentication": emailAuthentication.Insertable;
    "employees": employees.Insertable;
    "files": files.Insertable;
    "identityTest": identityTest.Insertable;
    "images": images.Insertable;
    "int8test": int8test.Insertable;
    "matBooks": matBooks.Insertable;
    "matCustom": matCustom.Insertable;
    "nameCounts": nameCounts.Insertable;
    "numeric_mview": numeric_mview.Insertable;
    "numeric_test": numeric_test.Insertable;
    "orderProducts": orderProducts.Insertable;
    "orders": orders.Insertable;
    "paragraphs": paragraphs.Insertable;
    "photos": photos.Insertable;
    "products": products.Insertable;
    "stores": stores.Insertable;
    "stringreturning": stringreturning.Insertable;
    "subjectPhotos": subjectPhotos.Insertable;
    "subjects": subjects.Insertable;
    "tags": tags.Insertable;
    "testview": testview.Insertable;
    "testviewnoins": testviewnoins.Insertable;
    "words": words.Insertable;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.Insertable;
    "UK.constituencies": UK.constituencies.Insertable;
    "UK.mps": UK.mps.Insertable;
    "US.districts": US.districts.Insertable;
    "US.representatives": US.representatives.Insertable;
    "US.states": US.states.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Updatable;
    "authors": authors.Updatable;
    "bankAccounts": bankAccounts.Updatable;
    "books": books.Updatable;
    "bools": bools.Updatable;
    "chapters": chapters.Updatable;
    "chat": chat.Updatable;
    "customTypes": customTypes.Updatable;
    "dimensions": dimensions.Updatable;
    "emailAuthentication": emailAuthentication.Updatable;
    "employees": employees.Updatable;
    "files": files.Updatable;
    "identityTest": identityTest.Updatable;
    "images": images.Updatable;
    "int8test": int8test.Updatable;
    "matBooks": matBooks.Updatable;
    "matCustom": matCustom.Updatable;
    "nameCounts": nameCounts.Updatable;
    "numeric_mview": numeric_mview.Updatable;
    "numeric_test": numeric_test.Updatable;
    "orderProducts": orderProducts.Updatable;
    "orders": orders.Updatable;
    "paragraphs": paragraphs.Updatable;
    "photos": photos.Updatable;
    "products": products.Updatable;
    "stores": stores.Updatable;
    "stringreturning": stringreturning.Updatable;
    "subjectPhotos": subjectPhotos.Updatable;
    "subjects": subjects.Updatable;
    "tags": tags.Updatable;
    "testview": testview.Updatable;
    "testviewnoins": testviewnoins.Updatable;
    "words": words.Updatable;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.Updatable;
    "UK.constituencies": UK.constituencies.Updatable;
    "UK.mps": UK.mps.Updatable;
    "US.districts": US.districts.Updatable;
    "US.representatives": US.representatives.Updatable;
    "US.states": US.states.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "appleTransactions": appleTransactions.UniqueIndex;
    "authors": authors.UniqueIndex;
    "bankAccounts": bankAccounts.UniqueIndex;
    "books": books.UniqueIndex;
    "bools": bools.UniqueIndex;
    "chapters": chapters.UniqueIndex;
    "chat": chat.UniqueIndex;
    "customTypes": customTypes.UniqueIndex;
    "dimensions": dimensions.UniqueIndex;
    "emailAuthentication": emailAuthentication.UniqueIndex;
    "employees": employees.UniqueIndex;
    "files": files.UniqueIndex;
    "identityTest": identityTest.UniqueIndex;
    "images": images.UniqueIndex;
    "int8test": int8test.UniqueIndex;
    "matBooks": matBooks.UniqueIndex;
    "matCustom": matCustom.UniqueIndex;
    "nameCounts": nameCounts.UniqueIndex;
    "numeric_mview": numeric_mview.UniqueIndex;
    "numeric_test": numeric_test.UniqueIndex;
    "orderProducts": orderProducts.UniqueIndex;
    "orders": orders.UniqueIndex;
    "paragraphs": paragraphs.UniqueIndex;
    "photos": photos.UniqueIndex;
    "products": products.UniqueIndex;
    "stores": stores.UniqueIndex;
    "stringreturning": stringreturning.UniqueIndex;
    "subjectPhotos": subjectPhotos.UniqueIndex;
    "subjects": subjects.UniqueIndex;
    "tags": tags.UniqueIndex;
    "testview": testview.UniqueIndex;
    "testviewnoins": testviewnoins.UniqueIndex;
    "words": words.UniqueIndex;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.UniqueIndex;
    "UK.constituencies": UK.constituencies.UniqueIndex;
    "UK.mps": UK.mps.UniqueIndex;
    "US.districts": US.districts.UniqueIndex;
    "US.representatives": US.representatives.UniqueIndex;
    "US.states": US.states.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "appleTransactions": appleTransactions.Column;
    "authors": authors.Column;
    "bankAccounts": bankAccounts.Column;
    "books": books.Column;
    "bools": bools.Column;
    "chapters": chapters.Column;
    "chat": chat.Column;
    "customTypes": customTypes.Column;
    "dimensions": dimensions.Column;
    "emailAuthentication": emailAuthentication.Column;
    "employees": employees.Column;
    "files": files.Column;
    "identityTest": identityTest.Column;
    "images": images.Column;
    "int8test": int8test.Column;
    "matBooks": matBooks.Column;
    "matCustom": matCustom.Column;
    "nameCounts": nameCounts.Column;
    "numeric_mview": numeric_mview.Column;
    "numeric_test": numeric_test.Column;
    "orderProducts": orderProducts.Column;
    "orders": orders.Column;
    "paragraphs": paragraphs.Column;
    "photos": photos.Column;
    "products": products.Column;
    "stores": stores.Column;
    "stringreturning": stringreturning.Column;
    "subjectPhotos": subjectPhotos.Column;
    "subjects": subjects.Column;
    "tags": tags.Column;
    "testview": testview.Column;
    "testviewnoins": testviewnoins.Column;
    "words": words.Column;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.Column;
    "UK.constituencies": UK.constituencies.Column;
    "UK.mps": UK.mps.Column;
    "US.districts": US.districts.Column;
    "US.representatives": US.representatives.Column;
    "US.states": US.states.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "appleTransactions": appleTransactions.SQL;
    "authors": authors.SQL;
    "bankAccounts": bankAccounts.SQL;
    "books": books.SQL;
    "bools": bools.SQL;
    "chapters": chapters.SQL;
    "chat": chat.SQL;
    "customTypes": customTypes.SQL;
    "dimensions": dimensions.SQL;
    "emailAuthentication": emailAuthentication.SQL;
    "employees": employees.SQL;
    "files": files.SQL;
    "identityTest": identityTest.SQL;
    "images": images.SQL;
    "int8test": int8test.SQL;
    "matBooks": matBooks.SQL;
    "matCustom": matCustom.SQL;
    "nameCounts": nameCounts.SQL;
    "numeric_mview": numeric_mview.SQL;
    "numeric_test": numeric_test.SQL;
    "orderProducts": orderProducts.SQL;
    "orders": orders.SQL;
    "paragraphs": paragraphs.SQL;
    "photos": photos.SQL;
    "products": products.SQL;
    "stores": stores.SQL;
    "stringreturning": stringreturning.SQL;
    "subjectPhotos": subjectPhotos.SQL;
    "subjects": subjects.SQL;
    "tags": tags.SQL;
    "testview": testview.SQL;
    "testviewnoins": testviewnoins.SQL;
    "words": words.SQL;
    "extra.tableInOtherSchema": extra.tableInOtherSchema.SQL;
    "UK.constituencies": UK.constituencies.SQL;
    "UK.mps": UK.mps.SQL;
    "US.districts": US.districts.SQL;
    "US.representatives": US.representatives.SQL;
    "US.states": US.states.SQL;
  }[T];

}
