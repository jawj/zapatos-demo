CREATE TABLE "identity_test"
( "id" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "data" TEXT
);

CREATE TABLE "authors" 
( "id" SERIAL PRIMARY KEY
, "name" TEXT NOT NULL
, "is_living" BOOLEAN
);
COMMENT ON COLUMN "authors"."name" IS 'Full name of author';

CREATE TABLE "books" 
( "id" SERIAL PRIMARY KEY
, "author_id" INTEGER NOT NULL REFERENCES "authors"("id")
, "title" TEXT
, "created_at" TIMESTAMPTZ NOT NULL DEFAULT now()
, "updated_at" TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE "tags"
( "tag" TEXT NOT NULL
, "book_id" INTEGER NOT NULL REFERENCES "books"("id")
);
CREATE UNIQUE INDEX "tags_unique_idx" ON "tags"("book_id", "tag");
CREATE INDEX "tags_book_id_idx" ON "tags"("tag");

CREATE TABLE "email_authentication" 
( "email" TEXT PRIMARY KEY
, "consecutive_failed_logins" INTEGER NOT NULL DEFAULT 0
, "last_failed_login" TIMESTAMPTZ
);

CREATE TYPE "apple_environment" AS ENUM 
( 'PROD'
, 'Sandbox'
);

CREATE TABLE "apple_transactions" 
( "environment" "apple_environment" NOT NULL
, "original_transaction_id" TEXT NOT NULL
, "account_id" INTEGER NOT NULL
, "latest_receipt_data" TEXT
-- ... lots more fields ...
);

ALTER TABLE "apple_transactions" 
  ADD CONSTRAINT "apple_trans_p_key" 
  PRIMARY KEY ("environment", "original_transaction_id");

CREATE TABLE "employees"
( "id" SERIAL PRIMARY KEY
, "name" TEXT NOT NULL
, "manager_id" INTEGER REFERENCES "employees"("id")
);

CREATE TABLE "bank_accounts" 
( "id" SERIAL PRIMARY KEY
, "balance" INTEGER NOT NULL DEFAULT 0 CHECK ("balance" > 0) 
);

CREATE EXTENSION postgis;
CREATE TABLE "stores"
( "id" SERIAL PRIMARY KEY
, "name" TEXT NOT NULL
, "geom" GEOMETRY NOT NULL
);
CREATE INDEX "stores_geom_idx" ON "stores" USING gist("geom");


CREATE DOMAIN "my_special_jsonb" AS jsonb;
CREATE DOMAIN "my_special_geometry" AS geometry;
CREATE DOMAIN "illegal/characters.text" AS text;
CREATE DOMAIN "snake_cased_typename" AS text;
CREATE DOMAIN "continue" AS real;
CREATE DOMAIN "_s_q_l" AS text;

CREATE TABLE "custom_types"
( "id" SERIAL PRIMARY KEY
, "structured_document" "my_special_jsonb"
, "location" geometry
, "other_location" "my_special_geometry"
, "further_locations" "my_special_geometry"[] -- not supported until Postgres 11
, "name" "illegal/characters.text"
, "also_name" "snake_cased_typename"
, "blah" "continue"  -- JS/TS reserved word
, "bar" "_s_q_l" -- Zapatos object name clash
, "numbers" real[]
);

CREATE CAST (json AS geometry) WITH FUNCTION ST_GeomFromGeoJSON(json) AS ASSIGNMENT; -- json(b) input not supported until PostGIS 2.5
CREATE CAST (jsonb AS geometry) WITH FUNCTION ST_GeomFromGeoJSON(jsonb) AS ASSIGNMENT; -- ditto

CREATE SCHEMA "extra";
CREATE TABLE "extra"."table_in_other_schema"
( "id" SERIAL PRIMARY KEY
, "details" TEXT
);

CREATE TABLE "dimensions" 
( "default_id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "always_id" int GENERATED ALWAYS AS IDENTITY
, "millimetres" real NOT NULL
, "inches" real NOT NULL GENERATED ALWAYS AS ("millimetres" / 25.4) STORED  -- generated columns not supported until Postgres 12
, "metres" real NOT NULL
);

CREATE OR REPLACE FUNCTION calculate_metres() RETURNS trigger AS $$
BEGIN
  NEW."metres" := NEW."millimetres" / 1000;
  RETURN NEW;
END; 
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE TRIGGER "dimensions_trigger"
BEFORE INSERT OR UPDATE ON "dimensions" 
FOR EACH ROW EXECUTE PROCEDURE calculate_metres();

CREATE TABLE "products" 
( "id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "product_name" text NOT NULL
);
CREATE TABLE "orders" 
( "id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "user_email" text NOT NULL
);
CREATE TABLE "order_products" 
( "order_id" int NOT NULL REFERENCES "orders"("id")
, "product_id" int NOT NULL REFERENCES "products"("id") 
);

CREATE TABLE "photos" 
( "photo_id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "url" text NOT NULL
);
CREATE TABLE "subjects"
( "subject_id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "name" text NOT NULL
);
CREATE TABLE "subject_photos"
( "subject_id" int NOT NULL REFERENCES "subjects"("subject_id")
, "photo_id" int NOT NULL REFERENCES "photos"("photo_id")
, CONSTRAINT userPhotosUnique UNIQUE ("subject_id", "photo_id")
);

CREATE MATERIALIZED VIEW "mat_books" AS SELECT "name", "title" FROM "authors" JOIN "books" ON "books"."author_id" = "authors"."id";
CREATE MATERIALIZED VIEW "mat_custom" AS SELECT * from "custom_types";
COMMENT ON COLUMN "mat_books"."title" IS 'Full title of book';

CREATE TABLE int8test (num int8);

CREATE TABLE "chat" (
  "telegram_chat_id" varchar(100) PRIMARY KEY,
  "created" TIMESTAMPTZ NOT NULL DEFAULT (now()),
  "updated" TIMESTAMPTZ NOT NULL DEFAULT (now())
);

CREATE TABLE "name_counts" 
( "name" text primary key
, "count" integer
);

CREATE TABLE "files" 
( "id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "created_at" timestamp with time zone NOT NULL
, "updated_at" timestamp with time zone NOT NULL
, "path" text not null UNIQUE
);

CREATE TABLE "images"
( "file_id" int UNIQUE REFERENCES "files"("id")
, "width" int not null
, "height" int not null
);

CREATE TABLE "numeric_test"
( "col" numeric(5,5)
);

CREATE TABLE "stringreturning"
( "date" date
, "arrdate" date[]
, "time" time
, "arrtime" time[]
, "timetz" timetz
, "arrtimetz" timetz[]
, "timestamp" timestamp
, "arrtimestamp" timestamp[]
, "timestamptz" timestamptz
, "arrtimestamptz" timestamptz[]
, "interval" interval
, "int4range" int4range
, "int8range" int8range
, "numrange" numrange
, "tsrange" tsrange
, "tstzrange" tstzrange
, "daterange" daterange
, "bytea" bytea
, "int8" int8
, "money" money
, "numeric" numeric
);

CREATE TABLE "chapters"
( "id" serial PRIMARY KEY
, "book_id" int NOT NULL REFERENCES "books"("id")
);
CREATE TABLE "paragraphs"
( "id" serial PRIMARY KEY
, "chapter_id" int NOT NULL REFERENCES "chapters"("id")
);

CREATE VIEW testview AS (SELECT * FROM "authors");
CREATE VIEW testviewnoins AS (SELECT lower(name) FROM "authors");

CREATE EXTENSION file_fdw;
CREATE SERVER local_file FOREIGN DATA WRAPPER file_fdw;
CREATE FOREIGN TABLE words (word text NOT NULL)
  SERVER local_file
  OPTIONS (filename '/usr/share/dict/words');

CREATE TABLE "bools" (
"value" boolean NOT NULL DEFAULT false 
);

ALTER DATABASE "zapatos_demo_snake_case" SET search_path TO "$user", public, extra;


CREATE SCHEMA "_u_s";
CREATE TYPE "_u_s"."parties" AS ENUM
( 'Democrat'
, 'Republican'
, 'Green'
, 'Other'
);
CREATE TABLE "_u_s"."states"
( "state_id" text PRIMARY KEY
, "state_name" text NOT NULL
);
CREATE TABLE "_u_s"."districts"
( "district_id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "state_id" text NOT NULL REFERENCES "_u_s"."states"
, "ordinality" int NOT NULL
);
CREATE TABLE "_u_s"."representatives"
( "representative_id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "representative_name" text NOT NULL
, "party" "_u_s"."parties" NOT NULL
, "district_id" int REFERENCES "_u_s"."districts" NOT NULL
);

CREATE SCHEMA "_u_k";
CREATE TYPE "_u_k"."parties" AS ENUM
( 'Labour'
, 'Conservative'
, 'Green'
, 'Other'
);
CREATE TYPE "_u_k"."nations" AS ENUM
( 'Scotland'
, 'Wales'
, 'Northern Ireland'
, 'England'
);
CREATE TABLE "_u_k"."constituencies"
( "constituency_id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "constituency_name" text NOT NULL
, "nation" "_u_k"."nations" NOT NULL
, "updated_at" timestamptz NOT NULL
);
CREATE TABLE "_u_k"."mps"
( "mp_id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
, "mp_name" text NOT NULL
, "party" "_u_k"."parties" NOT NULL
, "constituency_id" int NOT NULL REFERENCES "_u_k"."constituencies"
);
CREATE OR REPLACE FUNCTION "_u_k"."refresh_updated_at"() RETURNS TRIGGER AS $$
BEGIN
  new."updated_at" = now();
  RETURN new;
END; 
$$ LANGUAGE PLPGSQL;
CREATE TRIGGER "insert_trigger_u_k_constituencies_updated_at" BEFORE INSERT ON "_u_k"."constituencies" FOR EACH ROW EXECUTE PROCEDURE "_u_k"."refresh_updated_at"();
CREATE TRIGGER "update_trigger_u_k_constituencies_updated_at" BEFORE UPDATE ON "_u_k"."constituencies" FOR EACH ROW EXECUTE PROCEDURE "_u_k"."refresh_updated_at"();




